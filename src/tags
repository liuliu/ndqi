!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
APR_DECLARE	lib/frl_slab_pool.c	/^APR_DECLARE(apr_status_t) frl_slab_block_create(frl_slab_block_t** newblock, frl_slab_pool_t* pool, apr_size_t capacity)$/;"	f
APR_DECLARE	lib/frl_slab_pool.c	/^APR_DECLARE(apr_status_t) frl_slab_block_destory(frl_slab_block_t* block)$/;"	f
APR_DECLARE	lib/frl_slab_pool.c	/^APR_DECLARE(apr_status_t) frl_slab_pool_create(frl_slab_pool_t** newpool, apr_pool_t *mempool, apr_uint32_t capacity, apr_uint32_t per_size, frl_lock_u lock)$/;"	f
APR_DECLARE	lib/frl_slab_pool.c	/^APR_DECLARE(apr_status_t) frl_slab_pool_destroy(frl_slab_pool_t* pool)$/;"	f
APR_DECLARE	lib/frl_slab_pool.c	/^APR_DECLARE(apr_status_t) frl_slab_pool_safe(frl_slab_pool_t* pool)$/;"	f
APR_DECLARE	lib/frl_slab_pool.c	/^APR_DECLARE(frl_mem_stat_t) frl_slab_pool_stat(frl_slab_pool_t* pool)$/;"	f
BUF_PTR_CPY	nqbwdb.c	849;"	d	file:
BUF_PTR_CPY	nqbwdb.c	973;"	d	file:
BUF_PTR_CPY	nqfdb.c	512;"	d	file:
BUF_PTR_CPY	nqfdb.c	617;"	d	file:
BUF_PTR_VAL	nqbwdb.c	848;"	d	file:
BUF_PTR_VAL	nqbwdb.c	972;"	d	file:
BUF_PTR_VAL	nqfdb.c	511;"	d	file:
BUF_PTR_VAL	nqfdb.c	616;"	d	file:
BetweenStmt	parser/gram.y	/^BetweenStmt:	ColumnStmt BETWEEN ScalarExp AND ScalarExp$/;"	l
COL_NAME_KEYWORD	parser/keywords.h	5;"	d
COMPFLAG	test/makefile	/^COMPFLAG=-O3$/;"	m
CV_TYPE_NAME_ML_APCLUSTER	lib/mlapcluster.h	6;"	d
CXXFLAGS	net/makefile	/^CXXFLAGS = -I"\/opt\/apr\/include" -I"\/opt\/apr-util\/include" -I"$(OPENCV)\/include\/opencv"$/;"	m
CXXFLAGS	parser/makefile	/^CXXFLAGS = -I"\/opt\/apr\/include" -I"\/opt\/apr-util\/include" -I"$(OPENCV)\/include\/opencv"$/;"	m
CXXFLAGS	test/makefile	/^CXXFLAGS=-I"\/opt\/apr\/include" -I"\/opt\/apr-util\/include" -I"$(OPENCV)\/include\/opencv"$/;"	m
ColumnListStmt	parser/gram.y	/^ColumnListStmt:	ColumnStmt |$/;"	l
ColumnOptListStmt	parser/gram.y	/^ColumnOptListStmt:	\/* empty value *\/ |$/;"	l
ColumnStmt	parser/gram.y	/^ColumnStmt:	UUID { $$ = $1; } |$/;"	l
ComparisonStmt	parser/gram.y	/^ComparisonStmt:	ColumnStmt NUMGT ScalarExp$/;"	l
CondStmt	parser/gram.y	/^CondStmt:	CondStmt OR CondStmt$/;"	l
CvAPCParams	lib/mlapcluster.h	/^	CvAPCParams( int _maxiteration, int _stopcriterion, double _lambda )$/;"	f	struct:CvAPCParams	access:public	signature:( int _maxiteration, int _stopcriterion, double _lambda )
CvAPCParams	lib/mlapcluster.h	/^	CvAPCParams()$/;"	f	struct:CvAPCParams	access:public	signature:()
CvAPCParams	lib/mlapcluster.h	/^struct CV_EXPORTS CvAPCParams$/;"	s
CvAPCParams::CvAPCParams	lib/mlapcluster.h	/^	CvAPCParams( int _maxiteration, int _stopcriterion, double _lambda )$/;"	f	struct:CvAPCParams	access:public	signature:( int _maxiteration, int _stopcriterion, double _lambda )
CvAPCParams::CvAPCParams	lib/mlapcluster.h	/^	CvAPCParams()$/;"	f	struct:CvAPCParams	access:public	signature:()
CvAPCParams::lambda	lib/mlapcluster.h	/^	double lambda;$/;"	m	struct:CvAPCParams	access:public
CvAPCParams::maxiteration	lib/mlapcluster.h	/^	int maxiteration;$/;"	m	struct:CvAPCParams	access:public
CvAPCParams::stopcriterion	lib/mlapcluster.h	/^	int stopcriterion;$/;"	m	struct:CvAPCParams	access:public
CvAPCluster	lib/mlapcluster.cpp	/^CvAPCluster::CvAPCluster( CvAPCParams _params )$/;"	f	class:CvAPCluster	signature:( CvAPCParams _params )
CvAPCluster	lib/mlapcluster.h	/^		CvAPCluster( CvAPCParams _params );$/;"	p	class:CvAPCluster	access:public	signature:( CvAPCParams _params )
CvAPCluster	lib/mlapcluster.h	/^class CV_EXPORTS CvAPCluster : public CvStatModel$/;"	c	inherits:CvStatModel
CvAPCluster::CvAPCluster	lib/mlapcluster.cpp	/^CvAPCluster::CvAPCluster( CvAPCParams _params )$/;"	f	class:CvAPCluster	signature:( CvAPCParams _params )
CvAPCluster::CvAPCluster	lib/mlapcluster.h	/^		CvAPCluster( CvAPCParams _params );$/;"	p	class:CvAPCluster	access:public	signature:( CvAPCParams _params )
CvAPCluster::clear	lib/mlapcluster.cpp	/^CvAPCluster::clear()$/;"	f	class:CvAPCluster	signature:()
CvAPCluster::clear	lib/mlapcluster.h	/^		virtual void clear();$/;"	p	class:CvAPCluster	access:public	signature:()
CvAPCluster::params	lib/mlapcluster.h	/^		CvAPCParams params;$/;"	m	class:CvAPCluster	access:private
CvAPCluster::read	lib/mlapcluster.cpp	/^CvAPCluster::read( CvFileStorage* fs,$/;"	f	class:CvAPCluster	signature:( CvFileStorage* fs, CvFileNode* root_node )
CvAPCluster::read	lib/mlapcluster.h	/^		virtual void read( CvFileStorage* fs, CvFileNode* root_node );$/;"	p	class:CvAPCluster	access:public	signature:( CvFileStorage* fs, CvFileNode* root_node )
CvAPCluster::train	lib/mlapcluster.cpp	/^CvAPCluster::train( const CvSparseMat* similarity,$/;"	f	class:CvAPCluster	signature:( const CvSparseMat* similarity, const CvMat* labels )
CvAPCluster::train	lib/mlapcluster.cpp	/^bool CvAPCluster::train( const CvMat* similarity,$/;"	f	class:CvAPCluster	signature:( const CvMat* similarity, const CvMat* labels )
CvAPCluster::train	lib/mlapcluster.h	/^		virtual bool train( const CvMat* _train_data, const CvMat* _response );$/;"	p	class:CvAPCluster	access:public	signature:( const CvMat* _train_data, const CvMat* _response )
CvAPCluster::train	lib/mlapcluster.h	/^		virtual bool train( const CvSparseMat* _train_data, const CvMat* _response );$/;"	p	class:CvAPCluster	access:public	signature:( const CvSparseMat* _train_data, const CvMat* _response )
CvAPCluster::write	lib/mlapcluster.cpp	/^CvAPCluster::write( CvFileStorage* fs,$/;"	f	class:CvAPCluster	signature:( CvFileStorage* fs, const char* name )
CvAPCluster::write	lib/mlapcluster.h	/^		virtual void write( CvFileStorage* fs, const char* name );$/;"	p	class:CvAPCluster	access:public	signature:( CvFileStorage* fs, const char* name )
CvAPCluster::~CvAPCluster	lib/mlapcluster.cpp	/^CvAPCluster::~CvAPCluster()$/;"	f	class:CvAPCluster	signature:()
CvAPCluster::~CvAPCluster	lib/mlapcluster.h	/^		virtual ~CvAPCluster();$/;"	p	class:CvAPCluster	access:public	signature:()
CvGaborFilter	lib/cvgist.h	/^struct CvGaborFilter$/;"	s
CvGaborFilter::conv_img	lib/cvgist.h	/^	CvMat* conv_img;$/;"	m	struct:CvGaborFilter	access:public
CvGaborFilter::conv_real	lib/cvgist.h	/^	CvMat* conv_real;$/;"	m	struct:CvGaborFilter	access:public
CvGaborFilter::orientation	lib/cvgist.h	/^	int orientation;$/;"	m	struct:CvGaborFilter	access:public
CvGaborFilter::scale	lib/cvgist.h	/^	int scale;$/;"	m	struct:CvGaborFilter	access:public
CvGaborFilter::size	lib/cvgist.h	/^	int size;$/;"	m	struct:CvGaborFilter	access:public
CvSparseNode2D	lib/mlapcluster.cpp	/^struct CvSparseNode2D$/;"	s	file:
CvSparseNode2D::i	lib/mlapcluster.cpp	/^	int i;$/;"	m	struct:CvSparseNode2D	file:	access:public
CvSparseNode2D::k	lib/mlapcluster.cpp	/^	int k;$/;"	m	struct:CvSparseNode2D	file:	access:public
CvSparseNode2D::val	lib/mlapcluster.cpp	/^	double val;$/;"	m	struct:CvSparseNode2D	file:	access:public
DCAS_BUSY_VAL	lib/frl_slab_pool.c	54;"	d	file:
FRL_INSERT_AFTER	lib/frl_base.h	/^	FRL_INSERT_AFTER$/;"	e	enum:frl_insert_u
FRL_INSERT_BEFORE	lib/frl_base.h	/^	FRL_INSERT_BEFORE,$/;"	e	enum:frl_insert_u
FRL_LEVEL_ERROR	lib/frl_base.h	/^	FRL_LEVEL_ERROR,$/;"	e	enum:frl_level_u
FRL_LEVEL_INFO	lib/frl_base.h	/^	FRL_LEVEL_INFO$/;"	e	enum:frl_level_u
FRL_LEVEL_WARNING	lib/frl_base.h	/^	FRL_LEVEL_WARNING,$/;"	e	enum:frl_level_u
FRL_LOCK_FREE	lib/frl_base.h	/^	FRL_LOCK_FREE$/;"	e	enum:frl_lock_u
FRL_LOCK_WITH	lib/frl_base.h	/^	FRL_LOCK_WITH,$/;"	e	enum:frl_lock_u
FRL_MEMLEAK	lib/frl_slab_pool.h	13;"	d
FRL_MEMORY_GLOBAL	lib/frl_base.h	/^	FRL_MEMORY_GLOBAL$/;"	e	enum:frl_memory_u
FRL_MEMORY_SELF	lib/frl_base.h	/^	FRL_MEMORY_SELF,$/;"	e	enum:frl_memory_u
FRL_PROGRESS_COMLETE	lib/frl_base.h	14;"	d
FRL_PROGRESS_CONTINUE	lib/frl_base.h	16;"	d
FRL_PROGRESS_INTERRUPT	lib/frl_base.h	13;"	d
FRL_PROGRESS_IS_COMLETE	lib/frl_base.h	19;"	d
FRL_PROGRESS_IS_CONTINUE	lib/frl_base.h	21;"	d
FRL_PROGRESS_IS_INTERRUPT	lib/frl_base.h	18;"	d
FRL_PROGRESS_IS_RESTART	lib/frl_base.h	22;"	d
FRL_PROGRESS_IS_WAIT_SIGNAL	lib/frl_base.h	20;"	d
FRL_PROGRESS_RESTART	lib/frl_base.h	17;"	d
FRL_PROGRESS_WAIT_SIGNAL	lib/frl_base.h	15;"	d
FRL_STACKBUSY	lib/frl_slab_pool.h	15;"	d
FRL_STACKERR	lib/frl_slab_pool.h	14;"	d
FRL_THREAD_CONSUMER_PRODUCER	lib/frl_base.h	/^	FRL_THREAD_CONSUMER_PRODUCER$/;"	e	enum:frl_thread_model_u
FRL_THREAD_LEADER_FOLLOWER	lib/frl_base.h	/^	FRL_THREAD_LEADER_FOLLOWER,$/;"	e	enum:frl_thread_model_u
GOLDEN	lib/cvlocalhist.cpp	8;"	d	file:
GUARD_cvgist_h	lib/cvgist.h	9;"	d
GUARD_cvlocalhist_h	lib/cvlocalhist.h	2;"	d
GUARD_frl_base_h	lib/frl_base.h	2;"	d
GUARD_frl_managed_mem_h	lib/frl_managed_mem.h	2;"	d
GUARD_frl_slab_pool_h	lib/frl_slab_pool.h	8;"	d
GUARD_frl_util_md5_h	lib/frl_util_md5.h	2;"	d
GUARD_mlapcluster_h	lib/mlapcluster.h	2;"	d
InStmt	parser/gram.y	/^InStmt:	ScalarExp IN SubQueryStmt;$/;"	l
LEX	net/makefile	/^LEX = flex -8$/;"	m
LEX	parser/makefile	/^LEX = flex -8$/;"	m
LINKFLAG	net/makefile	/^LINKFLAG=-ldl -lpthread -lrt -lapr-1 -laprutil-1 -lcxcore -lcv -lhighgui -ltokyocabinet -ltokyodystopia -lexif -levent$/;"	m
LINKFLAG	parser/makefile	/^LINKFLAG=-ldl -lpthread -lrt -lapr-1 -laprutil-1 -lcxcore -lcv -lhighgui -ltokyocabinet -ltokyodystopia -lexif$/;"	m
LINKFLAG	test/makefile	/^LINKFLAG=-ldl -lpthread -lrt -lapr-1 -laprutil-1 -lcxcore -lcv -lhighgui -ltokyocabinet -ltokyodystopia -lexif$/;"	m
LINKLIB	test/makefile	/^LINKLIB=-L"$(OPENCV)\/lib"$/;"	m
LastScanDatabase	config/databases.c	/^const ScanDatabase* LastScanDatabase = ScanDatabases + sizeof(ScanDatabases) \/ sizeof(ScanDatabase);$/;"	v
LastScanKeyword	parser/keywords.c	/^const ScanKeyword* LastScanKeyword = ScanKeywords + sizeof(ScanKeywords) \/ sizeof(ScanKeyword);$/;"	v
LikeCfdStmt	parser/gram.y	/^LikeCfdStmt:	LikeStmt |$/;"	l
LikeStmt	parser/gram.y	/^LikeStmt:	ColumnStmt EXACT LIKE UUIDENT$/;"	l
NAMEDATALEN	config/databases.h	4;"	d
NAMEDATALEN	parser/keywords.h	9;"	d
NQBWDB	nqbwdb.h	/^} NQBWDB;$/;"	t	typeref:struct:__anon7
NQBWDBDATUM	nqbwdb.h	/^} NQBWDBDATUM;$/;"	t	typeref:struct:__anon6
NQBWDBDATUM_MAGIC_VAL	nqbwdb.h	/^const short int NQBWDBDATUM_MAGIC_VAL = 0x7643;$/;"	v
NQBWDBIDX	nqbwdb.h	/^typedef struct NQBWDBIDX {$/;"	s
NQBWDBIDX	nqbwdb.h	/^} NQBWDBIDX;$/;"	t	typeref:struct:NQBWDBIDX
NQBWDBIDX::inum	nqbwdb.h	/^	uint32_t inum;$/;"	m	struct:NQBWDBIDX	access:public
NQBWDBIDX::kstr	nqbwdb.h	/^	char** kstr;$/;"	m	struct:NQBWDBIDX	access:public
NQBWDBIDX::match	nqbwdb.h	/^	double match;$/;"	m	struct:NQBWDBIDX	access:public
NQBWDBIDX::next	nqbwdb.h	/^	struct NQBWDBIDX* next;$/;"	m	struct:NQBWDBIDX	typeref:struct:NQBWDBIDX::NQBWDBIDX	access:public
NQBWDBIDX::prev	nqbwdb.h	/^	struct NQBWDBIDX* prev;$/;"	m	struct:NQBWDBIDX	typeref:struct:NQBWDBIDX::NQBWDBIDX	access:public
NQBWDBIDX::rnum	nqbwdb.h	/^	uint32_t rnum;$/;"	m	struct:NQBWDBIDX	access:public
NQBWDBIDX::smft	nqbwdb.h	/^	CvFeatureTree* smft;$/;"	m	struct:NQBWDBIDX	access:public
NQBWDBIDX::smmat	nqbwdb.h	/^	CvMat* smmat;$/;"	m	struct:NQBWDBIDX	access:public
NQBWDBIDX::stem	nqbwdb.h	/^	NQBWDBSTEM* stem;$/;"	m	struct:NQBWDBIDX	access:public
NQBWDBIDX_MAGIC_VAL	nqbwdb.h	/^const short int NQBWDBIDX_MAGIC_VAL = 0x8239;$/;"	v
NQBWDBSTEM	nqbwdb.h	/^} NQBWDBSTEM;$/;"	t	typeref:struct:__anon5
NQBWDBUNIDX	nqbwdb.h	/^typedef struct NQBWDBUNIDX {$/;"	s
NQBWDBUNIDX	nqbwdb.h	/^} NQBWDBUNIDX;$/;"	t	typeref:struct:NQBWDBUNIDX
NQBWDBUNIDX::datum	nqbwdb.h	/^	NQBWDBDATUM* datum;$/;"	m	struct:NQBWDBUNIDX	access:public
NQBWDBUNIDX::kstr	nqbwdb.h	/^	char* kstr;$/;"	m	struct:NQBWDBUNIDX	access:public
NQBWDBUNIDX::next	nqbwdb.h	/^	struct NQBWDBUNIDX* next;$/;"	m	struct:NQBWDBUNIDX	typeref:struct:NQBWDBUNIDX::NQBWDBUNIDX	access:public
NQBWDBUNIDX::prev	nqbwdb.h	/^	struct NQBWDBUNIDX* prev;$/;"	m	struct:NQBWDBUNIDX	typeref:struct:NQBWDBUNIDX::NQBWDBUNIDX	access:public
NQBWDBUNIDX_MAGIC_VAL	nqbwdb.h	/^const short int NQBWDBUNIDX_MAGIC_VAL = 0x1839;$/;"	v
NQBWDB_MAGIC_VAL	nqbwdb.h	/^const short int NQBWDB_MAGIC_VAL = 0x9304;$/;"	v
NQBWPAIR	nqbwdb.c	/^} NQBWPAIR;$/;"	t	typeref:struct:__anon3	file:
NQBWUSERDATA	nqbwdb.c	/^} NQBWUSERDATA;$/;"	t	typeref:struct:__anon4	file:
NQBW_LIKE_BEST_MATCH_COUNT	nqbwdb.h	12;"	d
NQBW_LIKE_BEST_MATCH_SCORE	nqbwdb.h	13;"	d
NQCTAND	nqqry.h	/^	NQCTAND   = 0x01,	\/* and conjunction         *\/$/;"	e	enum:__anon19
NQCTOR	nqqry.h	/^	NQCTOR    = 0x02,	\/* or conjunction          *\/$/;"	e	enum:__anon19
NQFDB	nqfdb.h	/^} NQFDB;$/;"	t	typeref:struct:__anon14
NQFDBDATUM	nqfdb.h	/^} NQFDBDATUM;$/;"	t	typeref:struct:__anon13
NQFDBDATUM_MAGIC_VAL	nqfdb.h	/^const short int NQFDBDATUM_MAGIC_VAL = 0x2487;$/;"	v
NQFDBIDX	nqfdb.h	/^typedef struct NQFDBIDX {$/;"	s
NQFDBIDX	nqfdb.h	/^} NQFDBIDX;$/;"	t	typeref:struct:NQFDBIDX
NQFDBIDX::data	nqfdb.h	/^	NQFDBDATUM** data;$/;"	m	struct:NQFDBIDX	access:public
NQFDBIDX::f	nqfdb.h	/^	CvMat* f;$/;"	m	struct:NQFDBIDX	access:public
NQFDBIDX::ft	nqfdb.h	/^	CvFeatureTree* ft;$/;"	m	struct:NQFDBIDX	access:public
NQFDBIDX::inum	nqfdb.h	/^	uint32_t inum;$/;"	m	struct:NQFDBIDX	access:public
NQFDBIDX::kstr	nqfdb.h	/^	char** kstr;$/;"	m	struct:NQFDBIDX	access:public
NQFDBIDX::naive	nqfdb.h	/^	int naive;$/;"	m	struct:NQFDBIDX	access:public
NQFDBIDX::next	nqfdb.h	/^	struct NQFDBIDX* next;$/;"	m	struct:NQFDBIDX	typeref:struct:NQFDBIDX::NQFDBIDX	access:public
NQFDBIDX::p	nqfdb.h	/^	CvMat* p;$/;"	m	struct:NQFDBIDX	access:public
NQFDBIDX::prev	nqfdb.h	/^	struct NQFDBIDX* prev;$/;"	m	struct:NQFDBIDX	typeref:struct:NQFDBIDX::NQFDBIDX	access:public
NQFDBIDX::rho	nqfdb.h	/^	double rho;$/;"	m	struct:NQFDBIDX	access:public
NQFDBIDX::tau	nqfdb.h	/^	double tau;$/;"	m	struct:NQFDBIDX	access:public
NQFDBIDX_MAGIC_VAL	nqfdb.h	/^const short int NQFDBIDX_MAGIC_VAL = 0x9837;$/;"	v
NQFDBUNIDX	nqfdb.h	/^typedef struct NQFDBUNIDX {$/;"	s
NQFDBUNIDX	nqfdb.h	/^} NQFDBUNIDX;$/;"	t	typeref:struct:NQFDBUNIDX
NQFDBUNIDX::datum	nqfdb.h	/^	NQFDBDATUM* datum;$/;"	m	struct:NQFDBUNIDX	access:public
NQFDBUNIDX::kstr	nqfdb.h	/^	char* kstr;$/;"	m	struct:NQFDBUNIDX	access:public
NQFDBUNIDX::next	nqfdb.h	/^	struct NQFDBUNIDX* next;$/;"	m	struct:NQFDBUNIDX	typeref:struct:NQFDBUNIDX::NQFDBUNIDX	access:public
NQFDBUNIDX::prev	nqfdb.h	/^	struct NQFDBUNIDX* prev;$/;"	m	struct:NQFDBUNIDX	typeref:struct:NQFDBUNIDX::NQFDBUNIDX	access:public
NQFDBUNIDX_MAGIC_VAL	nqfdb.h	/^const short int NQFDBUNIDX_MAGIC_VAL = 0x8393;$/;"	v
NQFDB_MAGIC_VAL	nqfdb.h	/^const short int NQFDB_MAGIC_VAL = 0x2F28;$/;"	v
NQFOREACH	nqutil.h	/^typedef void (*NQFOREACH) (char*, void*, void*);$/;"	t
NQFPAIR	nqfdb.c	/^} NQFPAIR;$/;"	t	typeref:struct:__anon11	file:
NQFUSERDATA	nqfdb.c	/^} NQFUSERDATA;$/;"	t	typeref:struct:__anon12	file:
NQOPELIKE	nqqry.h	/^	NQOPELIKE = 0x09,	\/* object is exact like (exhausted search) *\/$/;"	e	enum:__anon20
NQOPLIKE	nqqry.h	/^	NQOPLIKE  = 0x08,	\/* object is like (index search)           *\/$/;"	e	enum:__anon20
NQOPNOT	nqqry.h	/^	NQOPNOT   = 0x10	\/* not operator                            *\/$/;"	e	enum:__anon20
NQOPNULL	nqqry.h	/^	NQOPNULL  = 0x0A,	\/* object is null                          *\/$/;"	e	enum:__anon20
NQOPNUMBT	nqqry.h	/^	NQOPNUMBT = 0x07,	\/* between two numbers                     *\/$/;"	e	enum:__anon20
NQOPNUMEQ	nqqry.h	/^	NQOPNUMEQ = 0x02,	\/* number is equal to                      *\/$/;"	e	enum:__anon20
NQOPNUMGE	nqqry.h	/^	NQOPNUMGE = 0x04,	\/* number is greater than or equal to      *\/$/;"	e	enum:__anon20
NQOPNUMGT	nqqry.h	/^	NQOPNUMGT = 0x03,	\/* number is greater than                  *\/$/;"	e	enum:__anon20
NQOPNUMLE	nqqry.h	/^	NQOPNUMLE = 0x06,	\/* number is less than or equal to         *\/$/;"	e	enum:__anon20
NQOPNUMLT	nqqry.h	/^	NQOPNUMLT = 0x05,	\/* number is less than                     *\/$/;"	e	enum:__anon20
NQOPSTREQ	nqqry.h	/^	NQOPSTREQ = 0x01,	\/* string is equal to                      *\/$/;"	e	enum:__anon20
NQPLAN	net/nqplan.h	/^} NQPLAN;$/;"	t	typeref:struct:__anon2
NQPLANITER	net/nqplan.h	/^typedef struct NQPLANITER {$/;"	s
NQPLANITER	net/nqplan.h	/^} NQPLANITER;$/;"	t	typeref:struct:NQPLANITER
NQPLANITER::postqry	net/nqplan.h	/^	NQQRY* postqry;$/;"	m	struct:NQPLANITER	access:public
NQPLANITER::prev	net/nqplan.h	/^	NQPLANITER* prev;$/;"	m	struct:NQPLANITER	access:public
NQPLANITER::qry	net/nqplan.h	/^	NQQRY* qry;$/;"	m	struct:NQPLANITER	access:public
NQPREQRY	nqpreqry.h	/^typedef struct NQPREQRY {$/;"	s
NQPREQRY	nqpreqry.h	/^} NQPREQRY;$/;"	t	typeref:struct:NQPREQRY
NQPREQRY::__anon8::str	nqpreqry.h	/^		char* str;$/;"	m	union:NQPREQRY::__anon8	access:public
NQPREQRY::__anon8::subqry	nqpreqry.h	/^		struct NQPREQRY* subqry;$/;"	m	union:NQPREQRY::__anon8	typeref:struct:NQPREQRY::__anon8::NQPREQRY	access:public
NQPREQRY::cfd	nqpreqry.h	/^	float cfd;$/;"	m	struct:NQPREQRY	access:public
NQPREQRY::cnum	nqpreqry.h	/^	int cnum;$/;"	m	struct:NQPREQRY	access:public
NQPREQRY::col	nqpreqry.h	/^	char* col;$/;"	m	struct:NQPREQRY	access:public
NQPREQRY::conds	nqpreqry.h	/^	struct NQPREQRY** conds;$/;"	m	struct:NQPREQRY	typeref:struct:NQPREQRY::NQPREQRY	access:public
NQPREQRY::db	nqpreqry.h	/^	const char* db;$/;"	m	struct:NQPREQRY	access:public
NQPREQRY::lmt	nqpreqry.h	/^	int lmt;$/;"	m	struct:NQPREQRY	access:public
NQPREQRY::mode	nqpreqry.h	/^	int mode;$/;"	m	struct:NQPREQRY	access:public
NQPREQRY::op	nqpreqry.h	/^	int op;$/;"	m	struct:NQPREQRY	access:public
NQPREQRY::order	nqpreqry.h	/^	int order;$/;"	m	struct:NQPREQRY	access:public
NQPREQRY::orderby	nqpreqry.h	/^	char* orderby;$/;"	m	struct:NQPREQRY	access:public
NQPREQRY::result	nqpreqry.h	/^	NQRDB* result;$/;"	m	struct:NQPREQRY	access:public
NQPREQRY::sbj	nqpreqry.h	/^	} sbj;$/;"	m	struct:NQPREQRY	typeref:union:NQPREQRY::__anon8	access:public
NQPREQRY::type	nqpreqry.h	/^	int type;$/;"	m	struct:NQPREQRY	access:public
NQQRY	nqqry.h	/^typedef struct NQQRY {$/;"	s
NQQRY	nqqry.h	/^} NQQRY;$/;"	t	typeref:struct:NQQRY
NQQRY::__anon18::desc	nqqry.h	/^		CvMat* desc;$/;"	m	union:NQQRY::__anon18	access:public
NQQRY::__anon18::str	nqqry.h	/^		char* str;$/;"	m	union:NQQRY::__anon18	access:public
NQQRY::__anon18::sub	nqqry.h	/^		NQRDB* sub;$/;"	m	union:NQQRY::__anon18	access:public
NQQRY::cfd	nqqry.h	/^	float cfd;$/;"	m	struct:NQQRY	access:public
NQQRY::cnum	nqqry.h	/^	int cnum;$/;"	m	struct:NQQRY	access:public
NQQRY::col	nqqry.h	/^	void* col;$/;"	m	struct:NQQRY	access:public
NQQRY::conds	nqqry.h	/^	struct NQQRY** conds;$/;"	m	struct:NQQRY	typeref:struct:NQQRY::NQQRY	access:public
NQQRY::db	nqqry.h	/^	void* db;$/;"	m	struct:NQQRY	access:public
NQQRY::lmt	nqqry.h	/^	int lmt;$/;"	m	struct:NQQRY	access:public
NQQRY::mode	nqqry.h	/^	int mode;$/;"	m	struct:NQQRY	access:public
NQQRY::op	nqqry.h	/^	int op;$/;"	m	struct:NQQRY	access:public
NQQRY::order	nqqry.h	/^	int order;$/;"	m	struct:NQQRY	access:public
NQQRY::orderby	nqqry.h	/^	void* orderby;$/;"	m	struct:NQQRY	access:public
NQQRY::result	nqqry.h	/^	NQRDB* result;$/;"	m	struct:NQQRY	access:public
NQQRY::sbj	nqqry.h	/^	} sbj;$/;"	m	struct:NQQRY	typeref:union:NQQRY::__anon18	access:public
NQQRY::type	nqqry.h	/^	int type;$/;"	m	struct:NQQRY	access:public
NQQRYPAIR	nqqry.c	/^} NQQRYPAIR;$/;"	t	typeref:struct:__anon16	file:
NQQRYUSERDATA	nqqry.c	/^} NQQRYUSERDATA;$/;"	t	typeref:struct:__anon17	file:
NQRDB	nqrdb.h	/^} NQRDB;$/;"	t	typeref:struct:__anon15
NQRDBDATUM	nqrdb.h	/^typedef struct NQRDBDATUM {$/;"	s
NQRDBDATUM	nqrdb.h	/^} NQRDBDATUM;$/;"	t	typeref:struct:NQRDBDATUM
NQRDBDATUM::chd	nqrdb.h	/^	NQRDBDATUM** chd;$/;"	m	struct:NQRDBDATUM	access:public
NQRDBDATUM::dirty	nqrdb.h	/^	bool dirty;$/;"	m	struct:NQRDBDATUM	access:public
NQRDBDATUM::ht	nqrdb.h	/^	uint8_t ht;$/;"	m	struct:NQRDBDATUM	access:public
NQRDBDATUM::kint	nqrdb.h	/^	uint32_t kint[4];$/;"	m	struct:NQRDBDATUM	access:public
NQRDBDATUM::max	nqrdb.h	/^	uint32_t max;$/;"	m	struct:NQRDBDATUM	access:public
NQRDBDATUM::next	nqrdb.h	/^	NQRDBDATUM* next;$/;"	m	struct:NQRDBDATUM	access:public
NQRDBDATUM::pr	nqrdb.h	/^	NQRDBDATUM* pr;$/;"	m	struct:NQRDBDATUM	access:public
NQRDBDATUM::prev	nqrdb.h	/^	NQRDBDATUM* prev;$/;"	m	struct:NQRDBDATUM	access:public
NQRDBDATUM::rnum	nqrdb.h	/^	uint32_t rnum;$/;"	m	struct:NQRDBDATUM	access:public
NQRDBDATUM::vbuf	nqrdb.h	/^	void* vbuf;$/;"	m	struct:NQRDBDATUM	access:public
NQSUBQRY	nqqry.h	/^	NQSUBQRY  = 0x10	\/* sub-query               *\/$/;"	e	enum:__anon19
NQTBWDB	nqqry.h	/^	NQTBWDB   = 0x04,	\/* bwdb type               *\/$/;"	e	enum:__anon19
NQTFDB	nqqry.h	/^	NQTFDB    = 0x05,	\/* fdb type                *\/$/;"	e	enum:__anon19
NQTRDB	nqqry.h	/^	NQTRDB    = 0x03,	\/* rdb type                *\/$/;"	e	enum:__anon19
NQTSPHINX	nqqry.h	/^	NQTSPHINX = 0x08,	\/* sphinx full-text search *\/$/;"	e	enum:__anon19
NQTTCTDB	nqqry.h	/^	NQTTCTDB  = 0x06,	\/* tokyo-cabinet table db  *\/$/;"	e	enum:__anon19
NQTTCWDB	nqqry.h	/^	NQTTCWDB  = 0x07,	\/* tokyo-cabinet word db   *\/$/;"	e	enum:__anon19
NQ_DATABASE	config/databases.c	3;"	d	file:
NQ_KEYWORD	parser/keywords.c	4;"	d	file:
OPENCV	net/makefile	/^OPENCV = \/opt\/opencv$/;"	m
OPENCV	parser/makefile	/^OPENCV = \/opt\/opencv$/;"	m
OPENCV	test/makefile	/^OPENCV=\/opt\/opencv$/;"	m
OUTDIR	test/makefile	/^OUTDIR=..\/..\/build$/;"	m
PredicateStmt	parser/gram.y	/^PredicateStmt:	ComparisonStmt { $$ = $1; } |$/;"	l
QRY_MAX_LMT	nqqry.h	12;"	d
RESERVED_KEYWORD	parser/keywords.h	7;"	d
SIZEOF_APR_UINT32_T	lib/frl_base.h	/^const apr_uint32_t SIZEOF_APR_UINT32_T = sizeof(apr_uint32_t);$/;"	v
SIZEOF_FRL_MD5	lib/frl_util_md5.h	/^const unsigned int SIZEOF_FRL_MD5 = sizeof(frl_md5);$/;"	v
SIZEOF_FRL_MEM_SAFE_T	lib/frl_slab_pool.h	/^const apr_uint32_t SIZEOF_FRL_MEM_SAFE_T = sizeof(frl_mem_safe_t);$/;"	v
SIZEOF_FRL_MEM_STAT_T	lib/frl_slab_pool.h	/^const apr_uint32_t SIZEOF_FRL_MEM_STAT_T = sizeof(frl_mem_stat_t);$/;"	v
SIZEOF_FRL_MEM_T	lib/frl_slab_pool.h	/^const apr_uint32_t SIZEOF_FRL_MEM_T = sizeof(frl_mem_t);$/;"	v
SIZEOF_FRL_SLAB_BLOCK_T	lib/frl_slab_pool.h	/^const apr_uint32_t SIZEOF_FRL_SLAB_BLOCK_T = sizeof(frl_slab_block_t);$/;"	v
SIZEOF_FRL_SLAB_POOL_T	lib/frl_slab_pool.h	/^const apr_uint32_t SIZEOF_FRL_SLAB_POOL_T = sizeof(frl_slab_pool_t);$/;"	v
SIZEOF_POINTER	lib/frl_base.h	/^const apr_uint32_t SIZEOF_POINTER = sizeof(void*);$/;"	v
ScalarExp	parser/gram.y	/^ScalarExp:	ICONST { $$ = $1; } |$/;"	l
ScanDatabase	config/databases.h	/^} ScanDatabase;$/;"	t	typeref:struct:__anon9
ScanDatabaseLookup	config/databases.c	/^const ScanDatabase* ScanDatabaseLookup(const char *text)$/;"	f	signature:(const char *text)
ScanDatabaseLookup	config/databases.h	/^extern const ScanDatabase* ScanDatabaseLookup(const char* text);$/;"	p	signature:(const char* text)
ScanDatabases	config/databases.c	/^const ScanDatabase ScanDatabases[] = {$/;"	v
ScanKeyword	parser/keywords.h	/^} ScanKeyword;$/;"	t	typeref:struct:__anon10
ScanKeywordLookup	parser/keywords.c	/^const ScanKeyword* ScanKeywordLookup(const char *text)$/;"	f	signature:(const char *text)
ScanKeywordLookup	parser/keywords.h	/^extern const ScanKeyword* ScanKeywordLookup(const char* text);$/;"	p	signature:(const char* text)
ScanKeywords	parser/keywords.c	/^const ScanKeyword ScanKeywords[] = {$/;"	v
SelectListStmt	parser/gram.y	/^SelectListStmt: SelectStmt |$/;"	l
SelectStmt	parser/gram.y	/^SelectStmt:	SELECT ColumnOptListStmt WHERE CondStmt$/;"	l
SubQueryStmt	parser/gram.y	/^SubQueryStmt: '(' SelectStmt ')' { $$ = $2; };$/;"	l
TYPE_FUNC_NAME_KEYWORD	parser/keywords.h	6;"	d
UNRESERVED_KEYWORD	parser/keywords.h	4;"	d
YACC	net/makefile	/^YACC = byacc -dv$/;"	m
YACC	parser/makefile	/^YACC = byacc -dv$/;"	m
_GUARD_DATABASES_	config/databases.h	2;"	d
_GUARD_KEYWORDS_	parser/keywords.h	2;"	d
_GUARD_NQBWDB_	nqbwdb.h	7;"	d
_GUARD_NQCLIENT_	net/nqclient.h	2;"	d
_GUARD_NQDP_	nqdp.h	7;"	d
_GUARD_NQFDB_	nqfdb.h	7;"	d
_GUARD_NQGS_	nqgs.h	7;"	d
_GUARD_NQIR_	nqir.h	7;"	d
_GUARD_NQLH_	nqlh.h	7;"	d
_GUARD_NQMETA_	nqmeta.h	7;"	d
_GUARD_NQPARSER_	parser/nqparser.h	2;"	d
_GUARD_NQPLAN_	net/nqplan.h	2;"	d
_GUARD_NQPREQRY_	nqpreqry.h	7;"	d
_GUARD_NQQRY_	nqqry.h	7;"	d
_GUARD_NQRDB_	nqrdb.h	7;"	d
_GUARD_NQUTIL_	nqutil.h	2;"	d
_GUARD__PARSER_	parser/_parser.h	2;"	d
__anon10::category	parser/keywords.h	/^	short int category;$/;"	m	struct:__anon10	access:public
__anon10::name	parser/keywords.h	/^	const char* name;$/;"	m	struct:__anon10	access:public
__anon10::value	parser/keywords.h	/^	short int value;$/;"	m	struct:__anon10	access:public
__anon11::kstr	nqfdb.c	/^	char* kstr;$/;"	m	struct:__anon11	file:	access:public
__anon11::likeness	nqfdb.c	/^	float likeness;$/;"	m	struct:__anon11	file:	access:public
__anon12::data	nqfdb.c	/^	NQFPAIR data[0];$/;"	m	struct:__anon12	file:	access:public
__anon12::fm	nqfdb.c	/^	CvMat* fm;$/;"	m	struct:__anon12	file:	access:public
__anon12::siz	nqfdb.c	/^	uint32_t siz;$/;"	m	struct:__anon12	file:	access:public
__anon13::f	nqfdb.h	/^	CvMat* f;$/;"	m	struct:__anon13	access:public
__anon14::idx	nqfdb.h	/^	NQFDBIDX* idx;$/;"	m	struct:__anon14	access:public
__anon14::inum	nqfdb.h	/^	uint32_t inum;$/;"	m	struct:__anon14	access:public
__anon14::rdb	nqfdb.h	/^	NQRDB* rdb;$/;"	m	struct:__anon14	access:public
__anon14::rwidxlock	nqfdb.h	/^	apr_thread_rwlock_t* rwidxlock;$/;"	m	struct:__anon14	access:public
__anon14::rwunidxlock	nqfdb.h	/^	apr_thread_rwlock_t* rwunidxlock;$/;"	m	struct:__anon14	access:public
__anon14::shallow	nqfdb.h	/^	bool shallow;$/;"	m	struct:__anon14	access:public
__anon14::unidx	nqfdb.h	/^	NQFDBUNIDX* unidx;$/;"	m	struct:__anon14	access:public
__anon14::unum	nqfdb.h	/^	uint32_t unum;$/;"	m	struct:__anon14	access:public
__anon15::head	nqrdb.h	/^	NQRDBDATUM* head;$/;"	m	struct:__anon15	access:public
__anon15::rnum	nqrdb.h	/^	uint64_t rnum;$/;"	m	struct:__anon15	access:public
__anon15::rwlock	nqrdb.h	/^	apr_thread_rwlock_t* rwlock;$/;"	m	struct:__anon15	access:public
__anon16::kstr	nqqry.c	/^	char* kstr;$/;"	m	struct:__anon16	file:	access:public
__anon16::likeness	nqqry.c	/^	float likeness;$/;"	m	struct:__anon16	file:	access:public
__anon17::data	nqqry.c	/^	NQQRYPAIR data[0];$/;"	m	struct:__anon17	file:	access:public
__anon17::siz	nqqry.c	/^	uint32_t siz;$/;"	m	struct:__anon17	file:	access:public
__anon2::cnum	net/nqplan.h	/^	int cnum;$/;"	m	struct:__anon2	access:public
__anon2::head	net/nqplan.h	/^	NQPLANITER* head;$/;"	m	struct:__anon2	access:public
__anon2::tail	net/nqplan.h	/^	NQPLANITER* tail;$/;"	m	struct:__anon2	access:public
__anon3::kstr	nqbwdb.c	/^	char* kstr;$/;"	m	struct:__anon3	file:	access:public
__anon3::likeness	nqbwdb.c	/^	float likeness;$/;"	m	struct:__anon3	file:	access:public
__anon4::bwdb	nqbwdb.c	/^	NQBWDB* bwdb;$/;"	m	struct:__anon4	file:	access:public
__anon4::bwm	nqbwdb.c	/^	CvMat* bwm;$/;"	m	struct:__anon4	file:	access:public
__anon4::data	nqbwdb.c	/^	NQBWPAIR data[0];$/;"	m	struct:__anon4	file:	access:public
__anon4::dist	nqbwdb.c	/^	CvMat* dist;$/;"	m	struct:__anon4	file:	access:public
__anon4::emax	nqbwdb.c	/^	uint32_t emax;$/;"	m	struct:__anon4	file:	access:public
__anon4::idx	nqbwdb.c	/^	CvMat* idx;$/;"	m	struct:__anon4	file:	access:public
__anon4::match	nqbwdb.c	/^	double match;$/;"	m	struct:__anon4	file:	access:public
__anon4::siz	nqbwdb.c	/^	uint32_t siz;$/;"	m	struct:__anon4	file:	access:public
__anon5::desc	nqbwdb.h	/^	CvMat desc;$/;"	m	struct:__anon5	access:public
__anon5::idf	nqbwdb.h	/^	float idf;$/;"	m	struct:__anon5	access:public
__anon5::kstr	nqbwdb.h	/^	char** kstr;$/;"	m	struct:__anon5	access:public
__anon5::rnum	nqbwdb.h	/^	uint32_t rnum;$/;"	m	struct:__anon5	access:public
__anon6::bw	nqbwdb.h	/^	CvMat* bw;$/;"	m	struct:__anon6	access:public
__anon6::bwft	nqbwdb.h	/^	CvFeatureTree* bwft;$/;"	m	struct:__anon6	access:public
__anon7::emax	nqbwdb.h	/^	uint32_t emax;$/;"	m	struct:__anon7	access:public
__anon7::idx	nqbwdb.h	/^	NQBWDBIDX* idx;$/;"	m	struct:__anon7	access:public
__anon7::inum	nqbwdb.h	/^	uint32_t inum;$/;"	m	struct:__anon7	access:public
__anon7::rdb	nqbwdb.h	/^	NQRDB* rdb;$/;"	m	struct:__anon7	access:public
__anon7::rwidxlock	nqbwdb.h	/^	apr_thread_rwlock_t* rwidxlock;$/;"	m	struct:__anon7	access:public
__anon7::rwunidxlock	nqbwdb.h	/^	apr_thread_rwlock_t* rwunidxlock;$/;"	m	struct:__anon7	access:public
__anon7::shallow	nqbwdb.h	/^	bool shallow;$/;"	m	struct:__anon7	access:public
__anon7::unidx	nqbwdb.h	/^	NQBWDBUNIDX* unidx;$/;"	m	struct:__anon7	access:public
__anon7::unum	nqbwdb.h	/^	uint32_t unum;$/;"	m	struct:__anon7	access:public
__anon7::wnum	nqbwdb.h	/^	uint32_t wnum;$/;"	m	struct:__anon7	access:public
__anon9::location	config/databases.h	/^	const char* location;$/;"	m	struct:__anon9	access:public
__anon9::name	config/databases.h	/^	const char* name;$/;"	m	struct:__anon9	access:public
__anon9::ref	config/databases.h	/^    void* ref;$/;"	m	struct:__anon9	access:public
__anon9::type	config/databases.h	/^	int type;$/;"	m	struct:__anon9	access:public
_dispatch_mat_ptr	nqutil.c	4;"	d	file:
arena	lib/frl_slab_pool.h	/^	apr_byte_t* arena;$/;"	m	struct:frl_slab_block_t	access:public
b16_pool	nqrdb.c	/^static frl_slab_pool_t* b16_pool = 0;$/;"	v	file:
b2_pool	nqrdb.c	/^static frl_slab_pool_t* b2_pool = 0;$/;"	v	file:
b6_pool	nqrdb.c	/^static frl_slab_pool_t* b6_pool = 0;$/;"	v	file:
base64_decode	lib/frl_util_md5.cpp	/^int frl_md5::base64_decode(const apr_byte_t* x)$/;"	f	class:frl_md5	signature:(const apr_byte_t* x)
base64_decode	lib/frl_util_md5.h	/^		int base64_decode(const apr_byte_t* x);$/;"	p	class:frl_md5	access:public	signature:(const apr_byte_t* x)
base64_encode	lib/frl_util_md5.cpp	/^int frl_md5::base64_encode(apr_byte_t* q)$/;"	f	class:frl_md5	signature:(apr_byte_t* q)
base64_encode	lib/frl_util_md5.h	/^		int base64_encode(apr_byte_t* q);$/;"	p	class:frl_md5	access:public	signature:(apr_byte_t* q)
base64_index	lib/frl_util_md5.cpp	/^inline unsigned long long base64_index(const apr_byte_t& x)$/;"	f	signature:(const apr_byte_t& x)
base64table	lib/frl_util_md5.cpp	/^const apr_byte_t base64table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";$/;"	v
block	lib/frl_slab_pool.h	/^	frl_slab_block_t* block;$/;"	m	struct:frl_mem_t	access:public
block	lib/frl_slab_pool.h	/^	frl_slab_block_t* block;$/;"	m	struct:frl_slab_pool_t	access:public
block_size	lib/frl_slab_pool.h	/^	apr_uint32_t block_size;$/;"	m	struct:frl_mem_stat_t	access:public
bw	nqbwdb.h	/^	CvMat* bw;$/;"	m	struct:__anon6	access:public
bwdb	nqbwdb.c	/^	NQBWDB* bwdb;$/;"	m	struct:__anon4	file:	access:public
bwft	nqbwdb.h	/^	CvFeatureTree* bwft;$/;"	m	struct:__anon6	access:public
bwm	nqbwdb.c	/^	CvMat* bwm;$/;"	m	struct:__anon4	file:	access:public
capacity	lib/frl_slab_pool.h	/^	apr_uint32_t capacity;$/;"	m	struct:frl_mem_stat_t	access:public
capacity	lib/frl_slab_pool.h	/^	apr_uint32_t capacity;$/;"	m	struct:frl_slab_block_t	access:public
category	parser/keywords.h	/^	short int category;$/;"	m	struct:__anon10	access:public
cfd	nqpreqry.h	/^	float cfd;$/;"	m	struct:NQPREQRY	access:public
cfd	nqqry.h	/^	float cfd;$/;"	m	struct:NQQRY	access:public
chd	nqrdb.h	/^	NQRDBDATUM** chd;$/;"	m	struct:NQRDBDATUM	access:public
clear	lib/mlapcluster.cpp	/^CvAPCluster::clear()$/;"	f	class:CvAPCluster	signature:()
clear	lib/mlapcluster.h	/^		virtual void clear();$/;"	p	class:CvAPCluster	access:public	signature:()
cnum	net/nqplan.h	/^	int cnum;$/;"	m	struct:__anon2	access:public
cnum	nqpreqry.h	/^	int cnum;$/;"	m	struct:NQPREQRY	access:public
cnum	nqqry.h	/^	int cnum;$/;"	m	struct:NQQRY	access:public
col	nqpreqry.h	/^	char* col;$/;"	m	struct:NQPREQRY	access:public
col	nqqry.h	/^	void* col;$/;"	m	struct:NQQRY	access:public
conds	nqpreqry.h	/^	struct NQPREQRY** conds;$/;"	m	struct:NQPREQRY	typeref:struct:NQPREQRY::NQPREQRY	access:public
conds	nqqry.h	/^	struct NQQRY** conds;$/;"	m	struct:NQQRY	typeref:struct:NQQRY::NQQRY	access:public
conv_img	lib/cvgist.h	/^	CvMat* conv_img;$/;"	m	struct:CvGaborFilter	access:public
conv_real	lib/cvgist.h	/^	CvMat* conv_real;$/;"	m	struct:CvGaborFilter	access:public
cvCalcGist	lib/cvgist.cpp	/^cvCalcGist( float* gist,$/;"	f	signature:( float* gist, const CvArr* _img, CvGaborFilter* gabors, int gabor_n )
cvCalcGist	lib/cvgist.h	/^void cvCalcGist( float* gist, const CvArr* _img, CvGaborFilter* gabors, int gabor_n );$/;"	p	signature:( float* gist, const CvArr* _img, CvGaborFilter* gabors, int gabor_n )
cvCalcLocalHist	lib/cvlocalhist.cpp	/^cvCalcLocalHist( CvArr* _img,$/;"	f	signature:( CvArr* _img, int* hists, const int bins )
cvCalcLocalHist	lib/cvlocalhist.h	/^void cvCalcLocalHist(CvArr* _img, int* hists, const int bins);$/;"	p	signature:(CvArr* _img, int* hists, const int bins)
cvCompareGist	lib/cvgist.cpp	/^cvCompareGist( float* gist_a,$/;"	f	signature:( float* gist_a, float* gist_b, int length )
cvCompareGist	lib/cvgist.h	/^float cvCompareGist( float* gist_a, float* gist_b, int length );$/;"	p	signature:( float* gist_a, float* gist_b, int length )
cvCompareLocalHist	lib/cvlocalhist.cpp	/^cvCompareLocalHist( int* hist_a,$/;"	f	signature:( int* hist_a, int* hist_b, int length )
cvCompareLocalHist	lib/cvlocalhist.h	/^float cvCompareLocalHist(int* hist_a, int* hist_b, int length);$/;"	p	signature:(int* hist_a, int* hist_b, int length)
cvCreateGaborFilters	lib/cvgist.cpp	/^cvCreateGaborFilters( int orientations,$/;"	f	signature:( int orientations, int scales, int size )
cvCreateGaborFilters	lib/cvgist.h	/^CvGaborFilter* cvCreateGaborFilters( int orientations, int scales, int size );$/;"	p	signature:( int orientations, int scales, int size )
cvReleaseGaborFilters	lib/cvgist.cpp	/^cvReleaseGaborFilters( CvGaborFilter** gabors,$/;"	f	signature:( CvGaborFilter** gabors, int gabor_n )
cvReleaseGaborFilters	lib/cvgist.h	/^void cvReleaseGaborFilters( CvGaborFilter** gabors, int gabor_n );$/;"	p	signature:( CvGaborFilter** gabors, int gabor_n )
data	nqbwdb.c	/^	NQBWPAIR data[0];$/;"	m	struct:__anon4	file:	access:public
data	nqfdb.c	/^	NQFPAIR data[0];$/;"	m	struct:__anon12	file:	access:public
data	nqfdb.h	/^	NQFDBDATUM** data;$/;"	m	struct:NQFDBIDX	access:public
data	nqqry.c	/^	NQQRYPAIR data[0];$/;"	m	struct:__anon17	file:	access:public
datum	nqbwdb.h	/^	NQBWDBDATUM* datum;$/;"	m	struct:NQBWDBUNIDX	access:public
datum	nqfdb.h	/^	NQFDBDATUM* datum;$/;"	m	struct:NQFDBUNIDX	access:public
db	nqpreqry.h	/^	const char* db;$/;"	m	struct:NQPREQRY	access:public
db	nqqry.h	/^	void* db;$/;"	m	struct:NQQRY	access:public
db_pool	nqbwdb.c	/^static frl_slab_pool_t* db_pool = 0;$/;"	v	file:
db_pool	nqfdb.c	/^static frl_slab_pool_t* db_pool = 0;$/;"	v	file:
db_pool	nqrdb.c	/^static frl_slab_pool_t* db_pool = 0;$/;"	v	file:
desc	nqbwdb.h	/^	CvMat desc;$/;"	m	struct:__anon5	access:public
desc	nqqry.h	/^		CvMat* desc;$/;"	m	union:NQQRY::__anon18	access:public
digest	lib/frl_util_md5.h	/^			apr_byte_t digest[16];$/;"	m	union:frl_md5::__anon1	access:public
dirty	nqrdb.h	/^	bool dirty;$/;"	m	struct:NQRDBDATUM	access:public
dist	nqbwdb.c	/^	CvMat* dist;$/;"	m	struct:__anon4	file:	access:public
dt_pool	nqbwdb.c	/^static frl_slab_pool_t* dt_pool = 0;$/;"	v	file:
dt_pool	nqfdb.c	/^static frl_slab_pool_t* dt_pool = 0;$/;"	v	file:
emax	nqbwdb.c	/^	uint32_t emax;$/;"	m	struct:__anon4	file:	access:public
emax	nqbwdb.h	/^	uint32_t emax;$/;"	m	struct:__anon7	access:public
f	nqfdb.h	/^	CvMat* f;$/;"	m	struct:NQFDBIDX	access:public
f	nqfdb.h	/^	CvMat* f;$/;"	m	struct:__anon13	access:public
flag	lib/frl_slab_pool.h	/^	apr_uint32_t flag;$/;"	m	struct:frl_mem_safe_t	access:public
fm	nqfdb.c	/^	CvMat* fm;$/;"	m	struct:__anon12	file:	access:public
frl_insert_u	lib/frl_base.h	/^enum frl_insert_u$/;"	g
frl_level_u	lib/frl_base.h	/^enum frl_level_u$/;"	g
frl_lock_u	lib/frl_base.h	/^enum frl_lock_u$/;"	g
frl_managed_free	lib/frl_managed_mem.c	/^void frl_managed_free(void* pointer)$/;"	f	signature:(void* pointer)
frl_managed_free	lib/frl_managed_mem.h	/^void frl_managed_free(void* pointer);$/;"	p	signature:(void* pointer)
frl_managed_malloc	lib/frl_managed_mem.c	/^void* frl_managed_malloc(apr_uint32_t size)$/;"	f	signature:(apr_uint32_t size)
frl_managed_malloc	lib/frl_managed_mem.h	/^void* frl_managed_malloc(apr_uint32_t size);$/;"	p	signature:(apr_uint32_t size)
frl_managed_ref	lib/frl_managed_mem.c	/^void frl_managed_ref(void* pointer)$/;"	f	signature:(void* pointer)
frl_managed_ref	lib/frl_managed_mem.h	/^void frl_managed_ref(void* pointer);$/;"	p	signature:(void* pointer)
frl_managed_unref	lib/frl_managed_mem.c	/^void frl_managed_unref(void* pointer)$/;"	f	signature:(void* pointer)
frl_managed_unref	lib/frl_managed_mem.h	/^void frl_managed_unref(void* pointer);$/;"	p	signature:(void* pointer)
frl_md5	lib/frl_util_md5.h	/^		frl_md5()$/;"	f	class:frl_md5	access:public	signature:()
frl_md5	lib/frl_util_md5.h	/^		frl_md5(const apr_byte_t* x)$/;"	f	class:frl_md5	access:public	signature:(const apr_byte_t* x)
frl_md5	lib/frl_util_md5.h	/^		frl_md5(const void* s, const apr_size_t size)$/;"	f	class:frl_md5	access:public	signature:(const void* s, const apr_size_t size)
frl_md5	lib/frl_util_md5.h	/^class frl_md5$/;"	c
frl_md5::__anon1::digest	lib/frl_util_md5.h	/^			apr_byte_t digest[16];$/;"	m	union:frl_md5::__anon1	access:public
frl_md5::__anon1::uid	lib/frl_util_md5.h	/^			apr_uint64_t uid[2];$/;"	m	union:frl_md5::__anon1	access:public
frl_md5::base64_decode	lib/frl_util_md5.cpp	/^int frl_md5::base64_decode(const apr_byte_t* x)$/;"	f	class:frl_md5	signature:(const apr_byte_t* x)
frl_md5::base64_decode	lib/frl_util_md5.h	/^		int base64_decode(const apr_byte_t* x);$/;"	p	class:frl_md5	access:public	signature:(const apr_byte_t* x)
frl_md5::base64_encode	lib/frl_util_md5.cpp	/^int frl_md5::base64_encode(apr_byte_t* q)$/;"	f	class:frl_md5	signature:(apr_byte_t* q)
frl_md5::base64_encode	lib/frl_util_md5.h	/^		int base64_encode(apr_byte_t* q);$/;"	p	class:frl_md5	access:public	signature:(apr_byte_t* q)
frl_md5::frl_md5	lib/frl_util_md5.h	/^		frl_md5()$/;"	f	class:frl_md5	access:public	signature:()
frl_md5::frl_md5	lib/frl_util_md5.h	/^		frl_md5(const apr_byte_t* x)$/;"	f	class:frl_md5	access:public	signature:(const apr_byte_t* x)
frl_md5::frl_md5	lib/frl_util_md5.h	/^		frl_md5(const void* s, const apr_size_t size)$/;"	f	class:frl_md5	access:public	signature:(const void* s, const apr_size_t size)
frl_md5::hash	lib/frl_util_md5.cpp	/^int frl_md5::hash(const void* s, const apr_size_t size)$/;"	f	class:frl_md5	signature:(const void* s, const apr_size_t size)
frl_md5::hash	lib/frl_util_md5.h	/^		int hash(const void* s, const apr_size_t size);$/;"	p	class:frl_md5	access:public	signature:(const void* s, const apr_size_t size)
frl_mem_safe_t	lib/frl_slab_pool.h	/^struct frl_mem_safe_t$/;"	s
frl_mem_safe_t::flag	lib/frl_slab_pool.h	/^	apr_uint32_t flag;$/;"	m	struct:frl_mem_safe_t	access:public
frl_mem_stat_t	lib/frl_slab_pool.h	/^struct frl_mem_stat_t$/;"	s
frl_mem_stat_t::block_size	lib/frl_slab_pool.h	/^	apr_uint32_t block_size;$/;"	m	struct:frl_mem_stat_t	access:public
frl_mem_stat_t::capacity	lib/frl_slab_pool.h	/^	apr_uint32_t capacity;$/;"	m	struct:frl_mem_stat_t	access:public
frl_mem_stat_t::per_size	lib/frl_slab_pool.h	/^	apr_uint32_t per_size;$/;"	m	struct:frl_mem_stat_t	access:public
frl_mem_stat_t::usage	lib/frl_slab_pool.h	/^	apr_size_t usage;$/;"	m	struct:frl_mem_stat_t	access:public
frl_mem_t	lib/frl_slab_pool.h	/^struct frl_mem_t$/;"	s
frl_mem_t::block	lib/frl_slab_pool.h	/^	frl_slab_block_t* block;$/;"	m	struct:frl_mem_t	access:public
frl_mem_t::id	lib/frl_slab_pool.h	/^	apr_uint32_t id;$/;"	m	struct:frl_mem_t	access:public
frl_mem_t::pointer	lib/frl_slab_pool.h	/^	void* pointer;$/;"	m	struct:frl_mem_t	access:public
frl_memory_u	lib/frl_base.h	/^enum frl_memory_u$/;"	g
frl_slab_block_t	lib/frl_slab_pool.h	/^struct frl_slab_block_t$/;"	s
frl_slab_block_t::arena	lib/frl_slab_pool.h	/^	apr_byte_t* arena;$/;"	m	struct:frl_slab_block_t	access:public
frl_slab_block_t::capacity	lib/frl_slab_pool.h	/^	apr_uint32_t capacity;$/;"	m	struct:frl_slab_block_t	access:public
frl_slab_block_t::next	lib/frl_slab_pool.h	/^	frl_slab_block_t* next;$/;"	m	struct:frl_slab_block_t	access:public
frl_slab_block_t::pool	lib/frl_slab_pool.h	/^	frl_slab_pool_t* pool;$/;"	m	struct:frl_slab_block_t	access:public
frl_slab_block_t::stack_pointer	lib/frl_slab_pool.h	/^	apr_byte_t** stack_pointer;$/;"	m	struct:frl_slab_block_t	access:public
frl_slab_block_t::usage_stack	lib/frl_slab_pool.h	/^	apr_byte_t** usage_stack;$/;"	m	struct:frl_slab_block_t	access:public
frl_slab_palloc	lib/frl_slab_pool.c	/^APR_DECLARE(void*) frl_slab_palloc(frl_slab_pool_t* pool)$/;"	f	signature:(frl_slab_pool_t* pool)
frl_slab_palloc_lock_free	lib/frl_slab_pool.c	/^APR_DECLARE(void*) frl_slab_palloc_lock_free(frl_slab_pool_t* pool)$/;"	f	signature:(frl_slab_pool_t* pool)
frl_slab_palloc_lock_with	lib/frl_slab_pool.c	/^APR_DECLARE(void*) frl_slab_palloc_lock_with(frl_slab_pool_t* pool)$/;"	f	signature:(frl_slab_pool_t* pool)
frl_slab_pcalloc	lib/frl_slab_pool.c	/^APR_DECLARE(void*) frl_slab_pcalloc(frl_slab_pool_t* pool)$/;"	f	signature:(frl_slab_pool_t* pool)
frl_slab_pfree	lib/frl_slab_pool.c	/^APR_DECLARE(void) frl_slab_pfree(void* pointer)$/;"	f	signature:(void* pointer)
frl_slab_pfree_lock_free	lib/frl_slab_pool.c	/^APR_DECLARE(void) frl_slab_pfree_lock_free(void* pointer)$/;"	f	signature:(void* pointer)
frl_slab_pfree_lock_with	lib/frl_slab_pool.c	/^APR_DECLARE(void) frl_slab_pfree_lock_with(void* pointer)$/;"	f	signature:(void* pointer)
frl_slab_pool_clear	lib/frl_slab_pool.c	/^APR_DECLARE(void) frl_slab_pool_clear(frl_slab_pool_t* pool)$/;"	f	signature:(frl_slab_pool_t* pool)
frl_slab_pool_t	lib/frl_slab_pool.h	/^struct frl_slab_pool_t$/;"	s
frl_slab_pool_t::block	lib/frl_slab_pool.h	/^	frl_slab_block_t* block;$/;"	m	struct:frl_slab_pool_t	access:public
frl_slab_pool_t::lock	lib/frl_slab_pool.h	/^	frl_lock_u lock;$/;"	m	struct:frl_slab_pool_t	access:public
frl_slab_pool_t::max_capacity	lib/frl_slab_pool.h	/^	apr_uint32_t max_capacity;$/;"	m	struct:frl_slab_pool_t	access:public
frl_slab_pool_t::mutex	lib/frl_slab_pool.h	/^	apr_thread_mutex_t* mutex;$/;"	m	struct:frl_slab_pool_t	access:public
frl_slab_pool_t::per_size	lib/frl_slab_pool.h	/^	apr_uint32_t per_size;$/;"	m	struct:frl_slab_pool_t	access:public
frl_thread_model_u	lib/frl_base.h	/^enum frl_thread_model_u$/;"	g
ft	nqfdb.h	/^	CvFeatureTree* ft;$/;"	m	struct:NQFDBIDX	access:public
gabors	nqgs.c	/^static CvGaborFilter* gabors = cvCreateGaborFilters(6, 4, 48);$/;"	v	file:
generic_handler	net/nqserver.c	/^void generic_handler(struct evhttp_request *req, void *arg)$/;"	f	signature:(struct evhttp_request *req, void *arg)
hash	lib/frl_util_md5.cpp	/^int frl_md5::hash(const void* s, const apr_size_t size)$/;"	f	class:frl_md5	signature:(const void* s, const apr_size_t size)
hash	lib/frl_util_md5.h	/^		int hash(const void* s, const apr_size_t size);$/;"	p	class:frl_md5	access:public	signature:(const void* s, const apr_size_t size)
head	net/nqplan.h	/^	NQPLANITER* head;$/;"	m	struct:__anon2	access:public
head	nqrdb.h	/^	NQRDBDATUM* head;$/;"	m	struct:__anon15	access:public
ht	nqrdb.h	/^	uint8_t ht;$/;"	m	struct:NQRDBDATUM	access:public
i	lib/mlapcluster.cpp	/^	int i;$/;"	m	struct:CvSparseNode2D	file:	access:public
icvCalcHist	lib/cvlocalhist.cpp	/^icvCalcHist( IplImage* img,$/;"	f	signature:( IplImage* img, int* hist, const int length, const CvRect rect )
icvCompareHist	lib/cvlocalhist.cpp	/^icvCompareHist( int *hist1,$/;"	f	signature:( int *hist1, int *hist2, const int length )
icvHistProjection	lib/cvlocalhist.cpp	/^icvHistProjection( CvArr* _img,$/;"	f	signature:( CvArr* _img, int bins, int* v_hist = NULL, int* h_hist = NULL )
icvSplitScan	lib/cvlocalhist.cpp	/^icvSplitScan( int *scanline,$/;"	f	signature:( int *scanline, const int length, const int width, const int start, const int end, const int lock_position, const double lock )
id	lib/frl_slab_pool.h	/^	apr_uint32_t id;$/;"	m	struct:frl_mem_t	access:public
idf	nqbwdb.h	/^	float idf;$/;"	m	struct:__anon5	access:public
idx	nqbwdb.c	/^	CvMat* idx;$/;"	m	struct:__anon4	file:	access:public
idx	nqbwdb.h	/^	NQBWDBIDX* idx;$/;"	m	struct:__anon7	access:public
idx	nqfdb.h	/^	NQFDBIDX* idx;$/;"	m	struct:__anon14	access:public
idx_pool	nqbwdb.c	/^static frl_slab_pool_t* idx_pool = 0;$/;"	v	file:
idx_pool	nqfdb.c	/^static frl_slab_pool_t* idx_pool = 0;$/;"	v	file:
inum	nqbwdb.h	/^	uint32_t inum;$/;"	m	struct:NQBWDBIDX	access:public
inum	nqbwdb.h	/^	uint32_t inum;$/;"	m	struct:__anon7	access:public
inum	nqfdb.h	/^	uint32_t inum;$/;"	m	struct:NQFDBIDX	access:public
inum	nqfdb.h	/^	uint32_t inum;$/;"	m	struct:__anon14	access:public
k	lib/mlapcluster.cpp	/^	int k;$/;"	m	struct:CvSparseNode2D	file:	access:public
kint	nqrdb.h	/^	uint32_t kint[4];$/;"	m	struct:NQRDBDATUM	access:public
kmatch	nqrdb.c	/^inline bool kmatch(uint32_t* kstr1, uint32_t* kstr2, uint32_t k)$/;"	f	signature:(uint32_t* kstr1, uint32_t* kstr2, uint32_t k)
kstr	nqbwdb.c	/^	char* kstr;$/;"	m	struct:__anon3	file:	access:public
kstr	nqbwdb.h	/^	char* kstr;$/;"	m	struct:NQBWDBUNIDX	access:public
kstr	nqbwdb.h	/^	char** kstr;$/;"	m	struct:NQBWDBIDX	access:public
kstr	nqbwdb.h	/^	char** kstr;$/;"	m	struct:__anon5	access:public
kstr	nqfdb.c	/^	char* kstr;$/;"	m	struct:__anon11	file:	access:public
kstr	nqfdb.h	/^	char* kstr;$/;"	m	struct:NQFDBUNIDX	access:public
kstr	nqfdb.h	/^	char** kstr;$/;"	m	struct:NQFDBIDX	access:public
kstr	nqqry.c	/^	char* kstr;$/;"	m	struct:__anon16	file:	access:public
kstr_pool	nqbwdb.c	/^static frl_slab_pool_t* kstr_pool = 0;$/;"	v	file:
kstr_pool	nqfdb.c	/^static frl_slab_pool_t* kstr_pool = 0;$/;"	v	file:
lambda	lib/mlapcluster.h	/^	double lambda;$/;"	m	struct:CvAPCParams	access:public
likeness	nqbwdb.c	/^	float likeness;$/;"	m	struct:__anon3	file:	access:public
likeness	nqfdb.c	/^	float likeness;$/;"	m	struct:__anon11	file:	access:public
likeness	nqqry.c	/^	float likeness;$/;"	m	struct:__anon16	file:	access:public
lmt	nqpreqry.h	/^	int lmt;$/;"	m	struct:NQPREQRY	access:public
lmt	nqqry.h	/^	int lmt;$/;"	m	struct:NQQRY	access:public
location	config/databases.h	/^	const char* location;$/;"	m	struct:__anon9	access:public
lock	lib/frl_slab_pool.h	/^	frl_lock_u lock;$/;"	m	struct:frl_slab_pool_t	access:public
main	net/nqserver.c	/^int main(int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
main	parser/test.cpp	/^int main()$/;"	f	signature:()
main	test/cx_test.cpp	/^int main()$/;"	f	signature:()
main	test/dpdb_test.cpp	/^int main()$/;"	f	signature:()
main	test/eplr_test.cpp	/^int main()$/;"	f	signature:()
main	test/file_test.cpp	/^int main()$/;"	f	signature:()
main	test/gs_test.cpp	/^int main()$/;"	f	signature:()
main	test/idx_test.cpp	/^int main()$/;"	f	signature:()
main	test/irdb_test.cpp	/^int main()$/;"	f	signature:()
main	test/lh_test.cpp	/^int main()$/;"	f	signature:()
main	test/mm_test.cpp	/^int main()$/;"	f	signature:()
main	test/qry_test.cpp	/^int main()$/;"	f	signature:()
main	test/rdb_test.cpp	/^int main()$/;"	f	signature:()
match	nqbwdb.c	/^	double match;$/;"	m	struct:__anon4	file:	access:public
match	nqbwdb.h	/^	double match;$/;"	m	struct:NQBWDBIDX	access:public
max	nqrdb.h	/^	uint32_t max;$/;"	m	struct:NQRDBDATUM	access:public
max_capacity	lib/frl_slab_pool.h	/^	apr_uint32_t max_capacity;$/;"	m	struct:frl_slab_pool_t	access:public
maxiteration	lib/mlapcluster.h	/^	int maxiteration;$/;"	m	struct:CvAPCParams	access:public
mempool	test/cx_test.cpp	/^apr_pool_t* mempool;$/;"	v
mempool	test/dpdb_test.cpp	/^apr_pool_t* mempool;$/;"	v
mempool	test/file_test.cpp	/^apr_pool_t* mempool;$/;"	v
mempool	test/gs_test.cpp	/^apr_pool_t* mempool;$/;"	v
mempool	test/idx_test.cpp	/^apr_pool_t* mempool;$/;"	v
mempool	test/irdb_test.cpp	/^apr_pool_t* mempool;$/;"	v
mempool	test/lh_test.cpp	/^apr_pool_t* mempool;$/;"	v
mempool	test/mm_test.cpp	/^apr_pool_t* mempool;$/;"	v
mempool	test/qry_test.cpp	/^apr_pool_t* mempool;$/;"	v
mempool	test/rdb_test.cpp	/^apr_pool_t* mempool;$/;"	v
mode	nqpreqry.h	/^	int mode;$/;"	m	struct:NQPREQRY	access:public
mode	nqqry.h	/^	int mode;$/;"	m	struct:NQQRY	access:public
mtx_pool	net/nqplan.c	/^static apr_pool_t* mtx_pool = 0;$/;"	v	file:
mtx_pool	nqbwdb.c	/^static apr_pool_t* mtx_pool = 0;$/;"	v	file:
mtx_pool	nqfdb.c	/^static apr_pool_t* mtx_pool = 0;$/;"	v	file:
mtx_pool	nqpreqry.c	/^static apr_pool_t* mtx_pool = 0;$/;"	v	file:
mtx_pool	nqqry.c	/^static apr_pool_t* mtx_pool = 0;$/;"	v	file:
mtx_pool	nqrdb.c	/^static apr_pool_t* mtx_pool = 0;$/;"	v	file:
mutex	lib/frl_slab_pool.h	/^	apr_thread_mutex_t* mutex;$/;"	m	struct:frl_slab_pool_t	access:public
naive	nqfdb.h	/^	int naive;$/;"	m	struct:NQFDBIDX	access:public
name	config/databases.h	/^	const char* name;$/;"	m	struct:__anon9	access:public
name	parser/keywords.h	/^	const char* name;$/;"	m	struct:__anon10	access:public
ncbwdbget	net/nqclient.c	/^CvMat* ncbwdbget(const char* db, char* uuid)$/;"	f	signature:(const char* db, char* uuid)
ncbwdbget	net/nqclient.h	/^CvMat* ncbwdbget(const char* db, char* uuid);$/;"	p	signature:(const char* db, char* uuid)
ncfdbget	net/nqclient.c	/^CvMat* ncfdbget(const char* db, char* uuid)$/;"	f	signature:(const char* db, char* uuid)
ncfdbget	net/nqclient.h	/^CvMat* ncfdbget(const char* db, char* uuid);$/;"	p	signature:(const char* db, char* uuid)
ncqrysearch	net/nqclient.c	/^int ncqrysearch(NQQRY* qry, char** kstr, float* likeness)$/;"	f	signature:(NQQRY* qry, char** kstr, float* likeness)
ncqrysearch	net/nqclient.h	/^int ncqrysearch(NQQRY* qry, char** kstr, float* likeness = 0);$/;"	p	signature:(NQQRY* qry, char** kstr, float* likeness = 0)
nctdbget	net/nqclient.c	/^char* nctdbget(const char* db, char* col, char* uuid)$/;"	f	signature:(const char* db, char* col, char* uuid)
nctdbget	net/nqclient.h	/^char* nctdbget(const char* db, char* col, char* uuid);$/;"	p	signature:(const char* db, char* col, char* uuid)
next	lib/frl_slab_pool.h	/^	frl_slab_block_t* next;$/;"	m	struct:frl_slab_block_t	access:public
next	nqbwdb.h	/^	struct NQBWDBIDX* next;$/;"	m	struct:NQBWDBIDX	typeref:struct:NQBWDBIDX::NQBWDBIDX	access:public
next	nqbwdb.h	/^	struct NQBWDBUNIDX* next;$/;"	m	struct:NQBWDBUNIDX	typeref:struct:NQBWDBUNIDX::NQBWDBUNIDX	access:public
next	nqfdb.h	/^	struct NQFDBIDX* next;$/;"	m	struct:NQFDBIDX	typeref:struct:NQFDBIDX::NQFDBIDX	access:public
next	nqfdb.h	/^	struct NQFDBUNIDX* next;$/;"	m	struct:NQFDBUNIDX	typeref:struct:NQFDBUNIDX::NQFDBUNIDX	access:public
next	nqrdb.h	/^	NQRDBDATUM* next;$/;"	m	struct:NQRDBDATUM	access:public
nqbwcx	nqbwdb.c	/^static void nqbwcx(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqbwdbdel	nqbwdb.c	/^void nqbwdbdel(NQBWDB* bwdb)$/;"	f	signature:(NQBWDB* bwdb)
nqbwdbdel	nqbwdb.h	/^void nqbwdbdel(NQBWDB* bwdb);$/;"	p	signature:(NQBWDB* bwdb)
nqbwdbget	nqbwdb.c	/^CvMat* nqbwdbget(NQBWDB* bwdb, char* kstr)$/;"	f	signature:(NQBWDB* bwdb, char* kstr)
nqbwdbget	nqbwdb.h	/^CvMat* nqbwdbget(NQBWDB* bwdb, char* kstr);$/;"	p	signature:(NQBWDB* bwdb, char* kstr)
nqbwdbidx	nqbwdb.c	/^bool nqbwdbidx(NQBWDB* bwdb, int min, double match)$/;"	f	signature:(NQBWDB* bwdb, int min, double match)
nqbwdbidx	nqbwdb.h	/^bool nqbwdbidx(NQBWDB* bwdb, int min = 1, double match = 0.6);$/;"	p	signature:(NQBWDB* bwdb, int min = 1, double match = 0.6)
nqbwdbjoin	nqbwdb.c	/^NQBWDB* nqbwdbjoin(NQBWDB* bwdb, NQRDB* rdb)$/;"	f	signature:(NQBWDB* bwdb, NQRDB* rdb)
nqbwdbjoin	nqbwdb.c	/^NQBWDB* nqbwdbjoin(NQBWDB* bwdb, char** kstr, int len)$/;"	f	signature:(NQBWDB* bwdb, char** kstr, int len)
nqbwdbjoin	nqbwdb.h	/^NQBWDB* nqbwdbjoin(NQBWDB* bwdb, NQRDB* rdb);$/;"	p	signature:(NQBWDB* bwdb, NQRDB* rdb)
nqbwdbjoin	nqbwdb.h	/^NQBWDB* nqbwdbjoin(NQBWDB* bwdb, char** kstr, int len);$/;"	p	signature:(NQBWDB* bwdb, char** kstr, int len)
nqbwdblike	nqbwdb.c	/^int nqbwdblike(NQBWDB* bwdb, CvMat* bwm, char** kstr, int lmt, int mode, double match, bool ordered, float* likeness)$/;"	f	signature:(NQBWDB* bwdb, CvMat* bwm, char** kstr, int lmt, int mode, double match, bool ordered, float* likeness)
nqbwdblike	nqbwdb.h	/^int nqbwdblike(NQBWDB* bwdb, CvMat* bwm, char** kstr, int lmt, int mode = NQBW_LIKE_BEST_MATCH_COUNT, double match = 0.6, bool ordered = false, float* likeness = 0);$/;"	p	signature:(NQBWDB* bwdb, CvMat* bwm, char** kstr, int lmt, int mode = NQBW_LIKE_BEST_MATCH_COUNT, double match = 0.6, bool ordered = false, float* likeness = 0)
nqbwdbmgidx	nqbwdb.c	/^bool nqbwdbmgidx(NQBWDB* bwdb, int max, int min, double match)$/;"	f	signature:(NQBWDB* bwdb, int max, int min, double match)
nqbwdbmgidx	nqbwdb.h	/^bool nqbwdbmgidx(NQBWDB* bwdb, int max, int min = 1, double match = 0.6);$/;"	p	signature:(NQBWDB* bwdb, int max, int min = 1, double match = 0.6)
nqbwdbnew	nqbwdb.c	/^NQBWDB* nqbwdbnew(void)$/;"	f	signature:(void)
nqbwdbnew	nqbwdb.h	/^NQBWDB* nqbwdbnew(void);$/;"	p	signature:(void)
nqbwdbout	nqbwdb.c	/^bool nqbwdbout(NQBWDB* bwdb, char* kstr)$/;"	f	signature:(NQBWDB* bwdb, char* kstr)
nqbwdbout	nqbwdb.h	/^bool nqbwdbout(NQBWDB* bwdb, char* kstr);$/;"	p	signature:(NQBWDB* bwdb, char* kstr)
nqbwdbput	nqbwdb.c	/^bool nqbwdbput(NQBWDB* bwdb, char* kstr, CvMat* bwm)$/;"	f	signature:(NQBWDB* bwdb, char* kstr, CvMat* bwm)
nqbwdbput	nqbwdb.h	/^bool nqbwdbput(NQBWDB* bwdb, char* kstr, CvMat* bwm);$/;"	p	signature:(NQBWDB* bwdb, char* kstr, CvMat* bwm)
nqbwdbreidx	nqbwdb.c	/^bool nqbwdbreidx(NQBWDB* bwdb, int min, double match)$/;"	f	signature:(NQBWDB* bwdb, int min, double match)
nqbwdbreidx	nqbwdb.h	/^bool nqbwdbreidx(NQBWDB* bwdb, int min = 1, double match = 0.6);$/;"	p	signature:(NQBWDB* bwdb, int min = 1, double match = 0.6)
nqbwdbsearch	nqbwdb.c	/^int nqbwdbsearch(NQBWDB* bwdb, CvMat* bwm, char** kstr, int lmt, bool ordered, float* likeness)$/;"	f	signature:(NQBWDB* bwdb, CvMat* bwm, char** kstr, int lmt, bool ordered, float* likeness)
nqbwdbsearch	nqbwdb.h	/^int nqbwdbsearch(NQBWDB* bwdb, CvMat* bwm, char** kstr, int lmt, bool ordered = false, float* likeness = 0);$/;"	p	signature:(NQBWDB* bwdb, CvMat* bwm, char** kstr, int lmt, bool ordered = false, float* likeness = 0)
nqbwdbsnap	nqbwdb.c	/^bool nqbwdbsnap(NQBWDB* bwdb, char* filename)$/;"	f	signature:(NQBWDB* bwdb, char* filename)
nqbwdbsnap	nqbwdb.h	/^bool nqbwdbsnap(NQBWDB* bwdb, char* filename);$/;"	p	signature:(NQBWDB* bwdb, char* filename)
nqbwdbsync	nqbwdb.c	/^bool nqbwdbsync(NQBWDB* bwdb, char* filename)$/;"	f	signature:(NQBWDB* bwdb, char* filename)
nqbwdbsync	nqbwdb.h	/^bool nqbwdbsync(NQBWDB* bwdb, char* filename);$/;"	p	signature:(NQBWDB* bwdb, char* filename)
nqbwdbwrite	nqbwdb.c	/^static void nqbwdbwrite(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqbweplr	nqbwdb.c	/^CvMat* nqbweplr(CvMat* data, int e, int emax)$/;"	f	signature:(CvMat* data, int e, int emax)
nqbweplr	nqbwdb.h	/^CvMat* nqbweplr(CvMat* data, int e = 5, int emax = 50);$/;"	p	signature:(CvMat* data, int e = 5, int emax = 50)
nqbwfwmc	nqbwdb.c	/^static void nqbwfwmc(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqbwfwms	nqbwdb.c	/^static void nqbwfwms(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqbwhpf	nqbwdb.c	/^static void nqbwhpf(NQBWPAIR* pr, uint32_t i, uint32_t siz)$/;"	f	file:	signature:(NQBWPAIR* pr, uint32_t i, uint32_t siz)
nqbwidxclr	nqbwdb.c	/^static void nqbwidxclr(NQBWDB* bwdb)$/;"	f	file:	signature:(NQBWDB* bwdb)
nqbwnuk	nqbwdb.c	/^static void nqbwnuk(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqbwrefr	nqbwdb.c	/^static void nqbwrefr(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqbwsort	nqbwdb.c	/^static void nqbwsort(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqbwunidxclr	nqbwdb.c	/^static void nqbwunidxclr(NQBWDB* bwdb)$/;"	f	file:	signature:(NQBWDB* bwdb)
nqdpnew	nqdp.c	/^CvMat* nqdpnew(CvArr* image, CvSURFParams params)$/;"	f	signature:(CvArr* image, CvSURFParams params)
nqdpnew	nqdp.h	/^CvMat* nqdpnew(CvArr* image, CvSURFParams params);$/;"	p	signature:(CvArr* image, CvSURFParams params)
nqeplr	nqutil.c	/^int nqeplr(CvMat* data, int* ki, int k)$/;"	f	signature:(CvMat* data, int* ki, int k)
nqeplr	nqutil.c	/^int nqeplr(CvSparseMat* sim, int* ki, int t, int k)$/;"	f	signature:(CvSparseMat* sim, int* ki, int t, int k)
nqeplr	nqutil.h	/^int nqeplr(CvMat* data, int* ki, int k = 0);$/;"	p	signature:(CvMat* data, int* ki, int k = 0)
nqeplr	nqutil.h	/^int nqeplr(CvSparseMat* sim, int* ki, int t, int k);$/;"	p	signature:(CvSparseMat* sim, int* ki, int t, int k)
nqfcx	nqfdb.c	/^static void nqfcx(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqfdbdel	nqfdb.c	/^void nqfdbdel(NQFDB* fdb)$/;"	f	signature:(NQFDB* fdb)
nqfdbdel	nqfdb.h	/^void nqfdbdel(NQFDB* fdb);$/;"	p	signature:(NQFDB* fdb)
nqfdbget	nqfdb.c	/^CvMat* nqfdbget(NQFDB* fdb, char* kstr)$/;"	f	signature:(NQFDB* fdb, char* kstr)
nqfdbget	nqfdb.h	/^CvMat* nqfdbget(NQFDB* fdb, char* kstr);$/;"	p	signature:(NQFDB* fdb, char* kstr)
nqfdbidx	nqfdb.c	/^bool nqfdbidx(NQFDB* fdb, int naive, double rho, double tau)$/;"	f	signature:(NQFDB* fdb, int naive, double rho, double tau)
nqfdbidx	nqfdb.h	/^bool nqfdbidx(NQFDB* fdb, int naive = 2, double rho = 0.75, double tau = 0.2);$/;"	p	signature:(NQFDB* fdb, int naive = 2, double rho = 0.75, double tau = 0.2)
nqfdbjoin	nqfdb.c	/^NQFDB* nqfdbjoin(NQFDB* fdb, NQRDB* rdb)$/;"	f	signature:(NQFDB* fdb, NQRDB* rdb)
nqfdbjoin	nqfdb.c	/^NQFDB* nqfdbjoin(NQFDB* fdb, char** kstr, int len)$/;"	f	signature:(NQFDB* fdb, char** kstr, int len)
nqfdbjoin	nqfdb.h	/^NQFDB* nqfdbjoin(NQFDB* fdb, NQRDB* rdb);$/;"	p	signature:(NQFDB* fdb, NQRDB* rdb)
nqfdbjoin	nqfdb.h	/^NQFDB* nqfdbjoin(NQFDB* fdb, char** kstr, int len);$/;"	p	signature:(NQFDB* fdb, char** kstr, int len)
nqfdblike	nqfdb.c	/^int nqfdblike(NQFDB* fdb, CvMat* fm, char** kstr, int lmt, bool ordered, float* likeness)$/;"	f	signature:(NQFDB* fdb, CvMat* fm, char** kstr, int lmt, bool ordered, float* likeness)
nqfdblike	nqfdb.h	/^int nqfdblike(NQFDB* fdb, CvMat* fm, char** kstr, int lmt, bool ordered = false, float* likeness = 0);$/;"	p	signature:(NQFDB* fdb, CvMat* fm, char** kstr, int lmt, bool ordered = false, float* likeness = 0)
nqfdbnew	nqfdb.c	/^NQFDB* nqfdbnew(void)$/;"	f	signature:(void)
nqfdbnew	nqfdb.h	/^NQFDB* nqfdbnew(void);$/;"	p	signature:(void)
nqfdbout	nqfdb.c	/^bool nqfdbout(NQFDB* fdb, char* kstr)$/;"	f	signature:(NQFDB* fdb, char* kstr)
nqfdbout	nqfdb.h	/^bool nqfdbout(NQFDB* fdb, char* kstr);$/;"	p	signature:(NQFDB* fdb, char* kstr)
nqfdbput	nqfdb.c	/^bool nqfdbput(NQFDB* fdb, char* kstr, CvMat* fm)$/;"	f	signature:(NQFDB* fdb, char* kstr, CvMat* fm)
nqfdbput	nqfdb.h	/^bool nqfdbput(NQFDB* fdb, char* kstr, CvMat* fm);$/;"	p	signature:(NQFDB* fdb, char* kstr, CvMat* fm)
nqfdbreidx	nqfdb.c	/^bool nqfdbreidx(NQFDB* fdb, int naive, double rho, double tau)$/;"	f	signature:(NQFDB* fdb, int naive, double rho, double tau)
nqfdbreidx	nqfdb.h	/^bool nqfdbreidx(NQFDB* fdb, int naive = 2, double rho = 0.75, double tau = 0.2);$/;"	p	signature:(NQFDB* fdb, int naive = 2, double rho = 0.75, double tau = 0.2)
nqfdbsearch	nqfdb.c	/^int nqfdbsearch(NQFDB* fdb, CvMat* fm, char** kstr, int lmt, bool ordered, float* likeness)$/;"	f	signature:(NQFDB* fdb, CvMat* fm, char** kstr, int lmt, bool ordered, float* likeness)
nqfdbsearch	nqfdb.h	/^int nqfdbsearch(NQFDB* fdb, CvMat* fm, char** kstr, int lmt, bool ordered = false, float* likeness = 0);$/;"	p	signature:(NQFDB* fdb, CvMat* fm, char** kstr, int lmt, bool ordered = false, float* likeness = 0)
nqfdbsnap	nqfdb.c	/^bool nqfdbsnap(NQFDB* fdb, char* filename)$/;"	f	signature:(NQFDB* fdb, char* filename)
nqfdbsnap	nqfdb.h	/^bool nqfdbsnap(NQFDB* fdb, char* filename);$/;"	p	signature:(NQFDB* fdb, char* filename)
nqfdbsync	nqfdb.c	/^bool nqfdbsync(NQFDB* fdb, char* filename)$/;"	f	signature:(NQFDB* fdb, char* filename)
nqfdbsync	nqfdb.h	/^bool nqfdbsync(NQFDB* fdb, char* filename);$/;"	p	signature:(NQFDB* fdb, char* filename)
nqfdbwrite	nqfdb.c	/^static void nqfdbwrite(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqffwm	nqfdb.c	/^static void nqffwm(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqfhpf	nqfdb.c	/^static void nqfhpf(NQFPAIR* pr, uint32_t i, uint32_t siz)$/;"	f	file:	signature:(NQFPAIR* pr, uint32_t i, uint32_t siz)
nqfidxclr	nqfdb.c	/^static void nqfidxclr(NQFDB* fdb)$/;"	f	file:	signature:(NQFDB* fdb)
nqfnuk	nqfdb.c	/^static void nqfnuk(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqfrefr	nqfdb.c	/^static void nqfrefr(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqfunidxclr	nqfdb.c	/^static void nqfunidxclr(NQFDB* fdb)$/;"	f	file:	signature:(NQFDB* fdb)
nqgsnew	nqgs.c	/^CvMat* nqgsnew(CvArr* image, int n)$/;"	f	signature:(CvArr* image, int n)
nqgsnew	nqgs.h	/^CvMat* nqgsnew(CvArr* image, int n);$/;"	p	signature:(CvArr* image, int n)
nqirnew	nqir.c	/^CvMat* nqirnew(CvArr* image, CvMSERParams params)$/;"	f	signature:(CvArr* image, CvMSERParams params)
nqirnew	nqir.h	/^CvMat* nqirnew(CvArr* image, CvMSERParams params);$/;"	p	signature:(CvArr* image, CvMSERParams params)
nqlhnew	nqlh.c	/^CvMat* nqlhnew(CvArr* image, int bins)$/;"	f	signature:(CvArr* image, int bins)
nqlhnew	nqlh.h	/^CvMat* nqlhnew(CvArr* image, int bins);$/;"	p	signature:(CvArr* image, int bins)
nqmetanew	nqmeta.c	/^TCMAP* nqmetanew(const char* file)$/;"	f	signature:(const char* file)
nqmetanew	nqmeta.h	/^TCMAP* nqmetanew(const char* file);$/;"	p	signature:(const char* file)
nqmetasetindex	nqmeta.c	/^bool nqmetasetindex(TCTDB* tdb)$/;"	f	signature:(TCTDB* tdb)
nqmetasetindex	nqmeta.h	/^bool nqmetasetindex(TCTDB* tdb);$/;"	p	signature:(TCTDB* tdb)
nqparse	parser/nqparser.h	/^NQPREQRY* nqparse(char* str, int siz);$/;"	p	signature:(char* str, int siz)
nqparsedel	parser/nqparser.h	/^void nqparsedel(void);$/;"	p	signature:(void)
nqplandel	net/nqplan.c	/^void nqplandel(NQPLAN* plan)$/;"	f	signature:(NQPLAN* plan)
nqplandel	net/nqplan.h	/^void nqplandel(NQPLAN* plan);$/;"	p	signature:(NQPLAN* plan)
nqplannew	net/nqplan.c	/^NQPLAN* nqplannew(NQPREQRY* preqry)$/;"	f	signature:(NQPREQRY* preqry)
nqplannew	net/nqplan.h	/^NQPLAN* nqplannew(NQPREQRY* preqry);$/;"	p	signature:(NQPREQRY* preqry)
nqplanrun	net/nqplan.c	/^int nqplanrun(NQPLAN* plan, char** kstr, float* likeness)$/;"	f	signature:(NQPLAN* plan, char** kstr, float* likeness)
nqplanrun	net/nqplan.h	/^int nqplanrun(NQPLAN* plan, char** kstr, float* likeness = 0);$/;"	p	signature:(NQPLAN* plan, char** kstr, float* likeness = 0)
nqpreqrydel	nqpreqry.c	/^void nqpreqrydel(NQPREQRY* qry)$/;"	f	signature:(NQPREQRY* qry)
nqpreqrydel	nqpreqry.h	/^void nqpreqrydel(NQPREQRY* qry);$/;"	p	signature:(NQPREQRY* qry)
nqpreqrydup	nqpreqry.c	/^NQPREQRY* nqpreqrydup(NQPREQRY* qry)$/;"	f	signature:(NQPREQRY* qry)
nqpreqrydup	nqpreqry.h	/^NQPREQRY* nqpreqrydup(NQPREQRY* qry);$/;"	p	signature:(NQPREQRY* qry)
nqpreqrynew	nqpreqry.c	/^NQPREQRY* nqpreqrynew(apr_pool_t* pool)$/;"	f	signature:(apr_pool_t* pool)
nqpreqrynew	nqpreqry.c	/^NQPREQRY* nqpreqrynew(void)$/;"	f	signature:(void)
nqpreqrynew	nqpreqry.h	/^NQPREQRY* nqpreqrynew(apr_pool_t* pool);$/;"	p	signature:(apr_pool_t* pool)
nqpreqrynew	nqpreqry.h	/^NQPREQRY* nqpreqrynew(void);$/;"	p	signature:(void)
nqqrydel	nqqry.c	/^void nqqrydel(NQQRY* qry)$/;"	f	signature:(NQQRY* qry)
nqqrydel	nqqry.h	/^void nqqrydel(NQQRY* qry);$/;"	p	signature:(NQQRY* qry)
nqqrydump	nqqry.c	/^void* nqqrydump(NQQRY* qry, int* sp)$/;"	f	signature:(NQQRY* qry, int* sp)
nqqrydump	nqqry.h	/^void* nqqrydump(NQQRY* qry, int* sp);$/;"	p	signature:(NQQRY* qry, int* sp)
nqqrydumpcount	nqqry.c	/^static int nqqrydumpcount(NQQRY* qry)$/;"	f	file:	signature:(NQQRY* qry)
nqqrydumpcpy	nqqry.c	/^static bool nqqrydumpcpy(NQQRY* qry, char* mem)$/;"	f	file:	signature:(NQQRY* qry, char* mem)
nqqryhpf	nqqry.c	/^static void nqqryhpf(NQQRYPAIR* pr, uint32_t i, uint32_t siz)$/;"	f	file:	signature:(NQQRYPAIR* pr, uint32_t i, uint32_t siz)
nqqrynew	nqqry.c	/^NQQRY* nqqrynew(void)$/;"	f	signature:(void)
nqqrynew	nqqry.c	/^NQQRY* nqqrynew(void* mem)$/;"	f	signature:(void* mem)
nqqrynew	nqqry.h	/^NQQRY* nqqrynew(void);$/;"	p	signature:(void)
nqqrynew	nqqry.h	/^NQQRY* nqqrynew(void* mem);$/;"	p	signature:(void* mem)
nqqryresult	nqqry.c	/^int nqqryresult(NQQRY* qry, char** kstr, float* likeness)$/;"	f	signature:(NQQRY* qry, char** kstr, float* likeness)
nqqryresult	nqqry.h	/^int nqqryresult(NQQRY* qry, char** kstr, float* likeness = 0);$/;"	p	signature:(NQQRY* qry, char** kstr, float* likeness = 0)
nqqrysearch	nqqry.c	/^NQRDB* nqqrysearch(NQQRY* qry)$/;"	f	signature:(NQQRY* qry)
nqqrysearch	nqqry.h	/^NQRDB* nqqrysearch(NQQRY* qry);$/;"	p	signature:(NQQRY* qry)
nqqrysort	nqqry.c	/^static void nqqrysort(char* kstr, void* vbuf, void* ud)$/;"	f	file:	signature:(char* kstr, void* vbuf, void* ud)
nqqrytrans	net/nqplan.c	/^static NQQRY* nqqrytrans(NQPLAN* plan, NQPREQRY* preqry)$/;"	f	file:	signature:(NQPLAN* plan, NQPREQRY* preqry)
nqrdbclear	nqrdb.c	/^static void nqrdbclear(NQRDB* rdb)$/;"	f	file:	signature:(NQRDB* rdb)
nqrdbclear	nqrdb.c	/^static void nqrdbclear(NQRDB* rdb);$/;"	p	file:	signature:(NQRDB* rdb)
nqrdbdel	nqrdb.c	/^void nqrdbdel(NQRDB* rdb)$/;"	f	signature:(NQRDB* rdb)
nqrdbdel	nqrdb.h	/^void nqrdbdel(NQRDB* rdb);$/;"	p	signature:(NQRDB* rdb)
nqrdbfilter	nqrdb.c	/^bool nqrdbfilter(NQRDB* rdb, char** kstr, int len)$/;"	f	signature:(NQRDB* rdb, char** kstr, int len)
nqrdbfilter	nqrdb.h	/^bool nqrdbfilter(NQRDB* rdb, char** kstr, int len);$/;"	p	signature:(NQRDB* rdb, char** kstr, int len)
nqrdbforeach	nqrdb.c	/^bool nqrdbforeach(NQRDB* rdb, NQFOREACH op, void* ud)$/;"	f	signature:(NQRDB* rdb, NQFOREACH op, void* ud)
nqrdbforeach	nqrdb.h	/^bool nqrdbforeach(NQRDB* rdb, NQFOREACH op, void* ud);$/;"	p	signature:(NQRDB* rdb, NQFOREACH op, void* ud)
nqrdbget	nqrdb.c	/^void* nqrdbget(NQRDB* rdb, char* kstr)$/;"	f	signature:(NQRDB* rdb, char* kstr)
nqrdbget	nqrdb.h	/^void* nqrdbget(NQRDB* rdb, char* kstr);$/;"	p	signature:(NQRDB* rdb, char* kstr)
nqrdbgetdatum	nqrdb.c	/^inline static NQRDBDATUM* nqrdbgetdatum(NQRDB* rdb, uint32_t* kint)$/;"	f	file:	signature:(NQRDB* rdb, uint32_t* kint)
nqrdbirt	nqrdb.c	/^static NQRDBDATUM* nqrdbirt(NQRDB* rdb, NQRDBDATUM* rec, uint8_t ht, uint32_t i, uint32_t* kint, void* vbuf)$/;"	f	file:	signature:(NQRDB* rdb, NQRDBDATUM* rec, uint8_t ht, uint32_t i, uint32_t* kint, void* vbuf)
nqrdbnew	nqrdb.c	/^NQRDB* nqrdbnew(void)$/;"	f	signature:(void)
nqrdbnew	nqrdb.h	/^NQRDB* nqrdbnew(void);$/;"	p	signature:(void)
nqrdbout	nqrdb.c	/^bool nqrdbout(NQRDB* rdb, char* kstr)$/;"	f	signature:(NQRDB* rdb, char* kstr)
nqrdbout	nqrdb.h	/^bool nqrdbout(NQRDB* rdb, char* kstr);$/;"	p	signature:(NQRDB* rdb, char* kstr)
nqrdboutdatum	nqrdb.c	/^inline static NQRDBDATUM* nqrdboutdatum(NQRDB* rdb, NQRDBDATUM* rec)$/;"	f	file:	signature:(NQRDB* rdb, NQRDBDATUM* rec)
nqrdbput	nqrdb.c	/^bool nqrdbput(NQRDB* rdb, char* kstr, void* vbuf)$/;"	f	signature:(NQRDB* rdb, char* kstr, void* vbuf)
nqrdbput	nqrdb.c	/^int nqrdbput(NQRDB* rdb, char** kstr, void** vbuf, int len)$/;"	f	signature:(NQRDB* rdb, char** kstr, void** vbuf, int len)
nqrdbput	nqrdb.h	/^bool nqrdbput(NQRDB* rdb, char* kstr, void* vbuf);$/;"	p	signature:(NQRDB* rdb, char* kstr, void* vbuf)
nqrdbput	nqrdb.h	/^int nqrdbput(NQRDB* rdb, char** kstr, void** vbuf, int len);$/;"	p	signature:(NQRDB* rdb, char** kstr, void** vbuf, int len)
nqstrdup	nqpreqry.c	/^static char* nqstrdup(const char* str, unsigned int maxlen)$/;"	f	file:	signature:(const char* str, unsigned int maxlen)
op	nqpreqry.h	/^	int op;$/;"	m	struct:NQPREQRY	access:public
op	nqqry.h	/^	int op;$/;"	m	struct:NQQRY	access:public
operator !=	lib/frl_util_md5.h	/^inline bool operator!=(const frl_md5& x, const frl_md5& y)$/;"	f	signature:(const frl_md5& x, const frl_md5& y)
operator <	lib/frl_util_md5.h	/^inline bool operator<(const frl_md5& x, const frl_md5& y)$/;"	f	signature:(const frl_md5& x, const frl_md5& y)
operator <=	lib/frl_util_md5.h	/^inline bool operator<=(const frl_md5& x, const frl_md5& y)$/;"	f	signature:(const frl_md5& x, const frl_md5& y)
operator ==	lib/frl_util_md5.h	/^inline bool operator==(const frl_md5& x, const frl_md5& y)$/;"	f	signature:(const frl_md5& x, const frl_md5& y)
operator >	lib/frl_util_md5.h	/^inline bool operator>(const frl_md5& x, const frl_md5& y)$/;"	f	signature:(const frl_md5& x, const frl_md5& y)
operator >=	lib/frl_util_md5.h	/^inline bool operator>=(const frl_md5& x, const frl_md5& y)$/;"	f	signature:(const frl_md5& x, const frl_md5& y)
order	nqpreqry.h	/^	int order;$/;"	m	struct:NQPREQRY	access:public
order	nqqry.h	/^	int order;$/;"	m	struct:NQQRY	access:public
orderby	nqpreqry.h	/^	char* orderby;$/;"	m	struct:NQPREQRY	access:public
orderby	nqqry.h	/^	void* orderby;$/;"	m	struct:NQQRY	access:public
orientation	lib/cvgist.h	/^	int orientation;$/;"	m	struct:CvGaborFilter	access:public
p	nqfdb.h	/^	CvMat* p;$/;"	m	struct:NQFDBIDX	access:public
params	lib/mlapcluster.h	/^		CvAPCParams params;$/;"	m	class:CvAPCluster	access:private
per_size	lib/frl_slab_pool.h	/^	apr_uint32_t per_size;$/;"	m	struct:frl_mem_stat_t	access:public
per_size	lib/frl_slab_pool.h	/^	apr_uint32_t per_size;$/;"	m	struct:frl_slab_pool_t	access:public
plan_iter_pool	net/nqplan.c	/^static frl_slab_pool_t* plan_iter_pool = 0;$/;"	v	file:
plan_pool	net/nqplan.c	/^static frl_slab_pool_t* plan_pool = 0;$/;"	v	file:
pointer	lib/frl_slab_pool.h	/^	void* pointer;$/;"	m	struct:frl_mem_t	access:public
pool	lib/frl_slab_pool.h	/^	frl_slab_pool_t* pool;$/;"	m	struct:frl_slab_block_t	access:public
pool	lib/frl_slab_pool.h	/^APR_DECLARE(apr_status_t) frl_slab_pool_destroy(frl_slab_pool_t* pool);$/;"	v
pool	lib/frl_slab_pool.h	/^APR_DECLARE(apr_status_t) frl_slab_pool_safe(frl_slab_pool_t* pool);$/;"	v
pool	lib/frl_slab_pool.h	/^APR_DECLARE(frl_mem_stat_t) frl_slab_pool_stat(frl_slab_pool_t* pool);$/;"	v
pool	lib/frl_slab_pool.h	/^APR_DECLARE(void) frl_slab_pool_clear(frl_slab_pool_t* pool);$/;"	v
pool	lib/frl_slab_pool.h	/^APR_DECLARE(void*) frl_slab_palloc(frl_slab_pool_t* pool);$/;"	v
pool	lib/frl_slab_pool.h	/^APR_DECLARE(void*) frl_slab_pcalloc(frl_slab_pool_t* pool);$/;"	v
postqry	net/nqplan.h	/^	NQQRY* postqry;$/;"	m	struct:NQPLANITER	access:public
pr	nqrdb.h	/^	NQRDBDATUM* pr;$/;"	m	struct:NQRDBDATUM	access:public
preqry_pool	nqpreqry.c	/^static frl_slab_pool_t* preqry_pool = 0;$/;"	v	file:
prev	net/nqplan.h	/^	NQPLANITER* prev;$/;"	m	struct:NQPLANITER	access:public
prev	nqbwdb.h	/^	struct NQBWDBIDX* prev;$/;"	m	struct:NQBWDBIDX	typeref:struct:NQBWDBIDX::NQBWDBIDX	access:public
prev	nqbwdb.h	/^	struct NQBWDBUNIDX* prev;$/;"	m	struct:NQBWDBUNIDX	typeref:struct:NQBWDBUNIDX::NQBWDBUNIDX	access:public
prev	nqfdb.h	/^	struct NQFDBIDX* prev;$/;"	m	struct:NQFDBIDX	typeref:struct:NQFDBIDX::NQFDBIDX	access:public
prev	nqfdb.h	/^	struct NQFDBUNIDX* prev;$/;"	m	struct:NQFDBUNIDX	typeref:struct:NQFDBUNIDX::NQFDBUNIDX	access:public
prev	nqrdb.h	/^	NQRDBDATUM* prev;$/;"	m	struct:NQRDBDATUM	access:public
qry	net/nqplan.h	/^	NQQRY* qry;$/;"	m	struct:NQPLANITER	access:public
qry_pool	nqqry.c	/^static frl_slab_pool_t* qry_pool = 0;$/;"	v	file:
rdb	nqbwdb.h	/^	NQRDB* rdb;$/;"	m	struct:__anon7	access:public
rdb	nqfdb.h	/^	NQRDB* rdb;$/;"	m	struct:__anon14	access:public
read	lib/mlapcluster.cpp	/^CvAPCluster::read( CvFileStorage* fs,$/;"	f	class:CvAPCluster	signature:( CvFileStorage* fs, CvFileNode* root_node )
read	lib/mlapcluster.h	/^		virtual void read( CvFileStorage* fs, CvFileNode* root_node );$/;"	p	class:CvAPCluster	access:public	signature:( CvFileStorage* fs, CvFileNode* root_node )
rec_pool	nqrdb.c	/^static frl_slab_pool_t* rec_pool = 0;$/;"	v	file:
ref	config/databases.h	/^    void* ref;$/;"	m	struct:__anon9	access:public
result	nqpreqry.h	/^	NQRDB* result;$/;"	m	struct:NQPREQRY	access:public
result	nqqry.h	/^	NQRDB* result;$/;"	m	struct:NQQRY	access:public
rho	nqfdb.h	/^	double rho;$/;"	m	struct:NQFDBIDX	access:public
rnum	nqbwdb.h	/^	uint32_t rnum;$/;"	m	struct:NQBWDBIDX	access:public
rnum	nqbwdb.h	/^	uint32_t rnum;$/;"	m	struct:__anon5	access:public
rnum	nqrdb.h	/^	uint32_t rnum;$/;"	m	struct:NQRDBDATUM	access:public
rnum	nqrdb.h	/^	uint64_t rnum;$/;"	m	struct:__anon15	access:public
rwidxlock	nqbwdb.h	/^	apr_thread_rwlock_t* rwidxlock;$/;"	m	struct:__anon7	access:public
rwidxlock	nqfdb.h	/^	apr_thread_rwlock_t* rwidxlock;$/;"	m	struct:__anon14	access:public
rwlock	nqrdb.h	/^	apr_thread_rwlock_t* rwlock;$/;"	m	struct:__anon15	access:public
rwunidxlock	nqbwdb.h	/^	apr_thread_rwlock_t* rwunidxlock;$/;"	m	struct:__anon7	access:public
rwunidxlock	nqfdb.h	/^	apr_thread_rwlock_t* rwunidxlock;$/;"	m	struct:__anon14	access:public
sbj	nqpreqry.h	/^	} sbj;$/;"	m	struct:NQPREQRY	typeref:union:NQPREQRY::__anon8	access:public
sbj	nqqry.h	/^	} sbj;$/;"	m	struct:NQQRY	typeref:union:NQQRY::__anon18	access:public
scale	lib/cvgist.h	/^	int scale;$/;"	m	struct:CvGaborFilter	access:public
shallow	nqbwdb.h	/^	bool shallow;$/;"	m	struct:__anon7	access:public
shallow	nqfdb.h	/^	bool shallow;$/;"	m	struct:__anon14	access:public
siz	nqbwdb.c	/^	uint32_t siz;$/;"	m	struct:__anon4	file:	access:public
siz	nqfdb.c	/^	uint32_t siz;$/;"	m	struct:__anon12	file:	access:public
siz	nqqry.c	/^	uint32_t siz;$/;"	m	struct:__anon17	file:	access:public
size	lib/cvgist.h	/^	int size;$/;"	m	struct:CvGaborFilter	access:public
smft	nqbwdb.h	/^	CvFeatureTree* smft;$/;"	m	struct:NQBWDBIDX	access:public
smmat	nqbwdb.h	/^	CvMat* smmat;$/;"	m	struct:NQBWDBIDX	access:public
stack_pointer	lib/frl_slab_pool.h	/^	apr_byte_t** stack_pointer;$/;"	m	struct:frl_slab_block_t	access:public
stem	nqbwdb.h	/^	NQBWDBSTEM* stem;$/;"	m	struct:NQBWDBIDX	access:public
stopcriterion	lib/mlapcluster.h	/^	int stopcriterion;$/;"	m	struct:CvAPCParams	access:public
storage	nqdp.c	/^static CvMemStorage* storage = 0;$/;"	v	file:
storage	nqir.c	/^static CvMemStorage* storage = 0;$/;"	v	file:
str	nqpreqry.h	/^		char* str;$/;"	m	union:NQPREQRY::__anon8	access:public
str	nqqry.h	/^		char* str;$/;"	m	union:NQQRY::__anon18	access:public
strtolower	nqmeta.c	/^static void strtolower(char* buf)$/;"	f	file:	signature:(char* buf)
sub	nqqry.h	/^		NQRDB* sub;$/;"	m	union:NQQRY::__anon18	access:public
subqry	nqpreqry.h	/^		struct NQPREQRY* subqry;$/;"	m	union:NQPREQRY::__anon8	typeref:struct:NQPREQRY::__anon8::NQPREQRY	access:public
sumup	test/rdb_test.cpp	/^void sumup(char* kstr, void* data, void* ud)$/;"	f	signature:(char* kstr, void* data, void* ud)
tabid	lib/cvlocalhist.cpp	/^int tabid[256];$/;"	v
tail	net/nqplan.h	/^	NQPLANITER* tail;$/;"	m	struct:__anon2	access:public
tau	nqfdb.h	/^	double tau;$/;"	m	struct:NQFDBIDX	access:public
train	lib/mlapcluster.cpp	/^CvAPCluster::train( const CvSparseMat* similarity,$/;"	f	class:CvAPCluster	signature:( const CvSparseMat* similarity, const CvMat* labels )
train	lib/mlapcluster.cpp	/^bool CvAPCluster::train( const CvMat* similarity,$/;"	f	class:CvAPCluster	signature:( const CvMat* similarity, const CvMat* labels )
train	lib/mlapcluster.h	/^		virtual bool train( const CvMat* _train_data, const CvMat* _response );$/;"	p	class:CvAPCluster	access:public	signature:( const CvMat* _train_data, const CvMat* _response )
train	lib/mlapcluster.h	/^		virtual bool train( const CvSparseMat* _train_data, const CvMat* _response );$/;"	p	class:CvAPCluster	access:public	signature:( const CvSparseMat* _train_data, const CvMat* _response )
type	config/databases.h	/^	int type;$/;"	m	struct:__anon9	access:public
type	nqpreqry.h	/^	int type;$/;"	m	struct:NQPREQRY	access:public
type	nqqry.h	/^	int type;$/;"	m	struct:NQQRY	access:public
uid	lib/frl_util_md5.h	/^			apr_uint64_t uid[2];$/;"	m	union:frl_md5::__anon1	access:public
unidx	nqbwdb.h	/^	NQBWDBUNIDX* unidx;$/;"	m	struct:__anon7	access:public
unidx	nqfdb.h	/^	NQFDBUNIDX* unidx;$/;"	m	struct:__anon14	access:public
unidx_pool	nqbwdb.c	/^static frl_slab_pool_t* unidx_pool = 0;$/;"	v	file:
unidx_pool	nqfdb.c	/^static frl_slab_pool_t* unidx_pool = 0;$/;"	v	file:
unum	nqbwdb.h	/^	uint32_t unum;$/;"	m	struct:__anon7	access:public
unum	nqfdb.h	/^	uint32_t unum;$/;"	m	struct:__anon14	access:public
usage	lib/frl_slab_pool.h	/^	apr_size_t usage;$/;"	m	struct:frl_mem_stat_t	access:public
usage_stack	lib/frl_slab_pool.h	/^	apr_byte_t** usage_stack;$/;"	m	struct:frl_slab_block_t	access:public
val	lib/mlapcluster.cpp	/^	double val;$/;"	m	struct:CvSparseNode2D	file:	access:public
value	parser/keywords.h	/^	short int value;$/;"	m	struct:__anon10	access:public
vbuf	nqrdb.h	/^	void* vbuf;$/;"	m	struct:NQRDBDATUM	access:public
wnum	nqbwdb.h	/^	uint32_t wnum;$/;"	m	struct:__anon7	access:public
write	lib/mlapcluster.cpp	/^CvAPCluster::write( CvFileStorage* fs,$/;"	f	class:CvAPCluster	signature:( CvFileStorage* fs, const char* name )
write	lib/mlapcluster.h	/^		virtual void write( CvFileStorage* fs, const char* name );$/;"	p	class:CvAPCluster	access:public	signature:( CvFileStorage* fs, const char* name )
yyerror	parser/_parser.h	/^extern void yyerror(const char*);$/;"	p	signature:(const char*)
yylex	parser/_parser.h	/^extern int yylex(void);$/;"	p	signature:(void)
yymem	parser/_parser.h	/^extern apr_pool_t* yymem(void);$/;"	p	signature:(void)
yyparse	parser/_parser.h	/^extern int yyparse(void);$/;"	p	signature:(void)
yyresult	parser/_parser.h	/^extern NQPREQRY* yyresult(void);$/;"	p	signature:(void)
~CvAPCluster	lib/mlapcluster.cpp	/^CvAPCluster::~CvAPCluster()$/;"	f	class:CvAPCluster	signature:()
~CvAPCluster	lib/mlapcluster.h	/^		virtual ~CvAPCluster();$/;"	p	class:CvAPCluster	access:public	signature:()
