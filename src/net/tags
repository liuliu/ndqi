!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
CXXFLAGS	makefile	/^CXXFLAGS = -I"\/opt\/apr\/include" -I"\/opt\/apr-util\/include" -I"$(OPENCV)\/include\/opencv"$/;"	m
LEX	makefile	/^LEX = flex -8$/;"	m
LINKFLAG	makefile	/^LINKFLAG=-ldl -lpthread -lrt -lapr-1 -laprutil-1 -lcxcore -lcv -lhighgui -ltokyocabinet -ltokyodystopia -lexif -levent$/;"	m
NQPLAN	nqplan.h	/^} NQPLAN;$/;"	t	typeref:struct:__anon1
NQPLANITER	nqplan.h	/^typedef struct NQPLANITER {$/;"	s
NQPLANITER	nqplan.h	/^} NQPLANITER;$/;"	t	typeref:struct:NQPLANITER
NQPLANITER::dbname	nqplan.h	/^	const char* dbname;$/;"	m	struct:NQPLANITER	access:public
NQPLANITER::postqry	nqplan.h	/^	NQQRY* postqry;$/;"	m	struct:NQPLANITER	access:public
NQPLANITER::prev	nqplan.h	/^	NQPLANITER* prev;$/;"	m	struct:NQPLANITER	access:public
NQPLANITER::qry	nqplan.h	/^	NQQRY* qry;$/;"	m	struct:NQPLANITER	access:public
NQPLANITER::type	nqplan.h	/^	int type;$/;"	m	struct:NQPLANITER	access:public
OPENCV	makefile	/^OPENCV = \/opt\/opencv$/;"	m
YACC	makefile	/^YACC = byacc -dv$/;"	m
_GUARD_NQCLIENT_	nqclient.h	2;"	d
_GUARD_NQPLAN_	nqplan.h	2;"	d
__anon1::cnum	nqplan.h	/^	int cnum;$/;"	m	struct:__anon1	access:public
__anon1::head	nqplan.h	/^	NQPLANITER* head;$/;"	m	struct:__anon1	access:public
__anon1::tail	nqplan.h	/^	NQPLANITER* tail;$/;"	m	struct:__anon1	access:public
cnum	nqplan.h	/^	int cnum;$/;"	m	struct:__anon1	access:public
dbname	nqplan.h	/^	const char* dbname;$/;"	m	struct:NQPLANITER	access:public
generic_handler	nqserver.c	/^void generic_handler(struct evhttp_request *req, void *arg)$/;"	f	signature:(struct evhttp_request *req, void *arg)
head	nqplan.h	/^	NQPLANITER* head;$/;"	m	struct:__anon1	access:public
main	nqserver.c	/^int main(int argc, char** argv)$/;"	f	signature:(int argc, char** argv)
mtx_pool	nqplan.c	/^static apr_pool_t* mtx_pool = 0;$/;"	v	file:
ncbwdbget	nqclient.c	/^CvMat* ncbwdbget(const char* db, char* uuid)$/;"	f	signature:(const char* db, char* uuid)
ncbwdbget	nqclient.h	/^CvMat* ncbwdbget(const char* db, char* uuid);$/;"	p	signature:(const char* db, char* uuid)
ncfdbget	nqclient.c	/^CvMat* ncfdbget(const char* db, char* uuid)$/;"	f	signature:(const char* db, char* uuid)
ncfdbget	nqclient.h	/^CvMat* ncfdbget(const char* db, char* uuid);$/;"	p	signature:(const char* db, char* uuid)
ncidx	nqclient.c	/^void ncidx(const char* db)$/;"	f	signature:(const char* db)
ncidx	nqclient.h	/^void ncidx(const char* db);$/;"	p	signature:(const char* db)
ncinit	nqclient.c	/^void ncinit()$/;"	f
ncinit	nqclient.h	/^void ncinit(void);$/;"	p	signature:(void)
ncjdbget	nqclient.c	/^TCLIST* ncjdbget(const char* db, char* uuid)$/;"	f	signature:(const char* db, char* uuid)
ncjdbget	nqclient.h	/^TCLIST* ncjdbget(const char* db, char* uuid);$/;"	p	signature:(const char* db, char* uuid)
ncjdbout	nqclient.c	/^bool ncjdbout(const char* db, char* uuid, char* word)$/;"	f	signature:(const char* db, char* uuid, char* word)
ncjdbout	nqclient.h	/^bool ncjdbout(const char* db, char* uuid, char* word);$/;"	p	signature:(const char* db, char* uuid, char* word)
ncjdbput	nqclient.c	/^bool ncjdbput(const char* db, char* uuid, char* word)$/;"	f	signature:(const char* db, char* uuid, char* word)
ncjdbput	nqclient.h	/^bool ncjdbput(const char* db, char* uuid, char* word);$/;"	p	signature:(const char* db, char* uuid, char* word)
ncmgidx	nqclient.c	/^void ncmgidx(const char* db, int max)$/;"	f	signature:(const char* db, int max)
ncmgidx	nqclient.h	/^void ncmgidx(const char* db, int max);$/;"	p	signature:(const char* db, int max)
ncoutany	nqclient.c	/^void ncoutany(char* uuid)$/;"	f	signature:(char* uuid)
ncoutany	nqclient.h	/^void ncoutany(char* uuid);$/;"	p	signature:(char* uuid)
ncputany	nqclient.c	/^void ncputany(char* uuid)$/;"	f	signature:(char* uuid)
ncputany	nqclient.h	/^void ncputany(char* uuid);$/;"	p	signature:(char* uuid)
ncqrysearch	nqclient.c	/^int ncqrysearch(NQQRY* qry, char** kstr, float* likeness)$/;"	f	signature:(NQQRY* qry, char** kstr, float* likeness)
ncqrysearch	nqclient.h	/^int ncqrysearch(NQQRY* qry, char** kstr, float* likeness = 0);$/;"	p	signature:(NQQRY* qry, char** kstr, float* likeness = 0)
ncreidx	nqclient.c	/^void ncreidx(const char* db)$/;"	f	signature:(const char* db)
ncreidx	nqclient.h	/^void ncreidx(const char* db);$/;"	p	signature:(const char* db)
ncsnap	nqclient.c	/^void ncsnap()$/;"	f
ncsnap	nqclient.h	/^void ncsnap(void);$/;"	p	signature:(void)
ncsync	nqclient.c	/^void ncsync()$/;"	f
ncsync	nqclient.h	/^void ncsync(void);$/;"	p	signature:(void)
nctdbget	nqclient.c	/^char* nctdbget(const char* db, char* col, char* uuid)$/;"	f	signature:(const char* db, char* col, char* uuid)
nctdbget	nqclient.h	/^char* nctdbget(const char* db, char* col, char* uuid);$/;"	p	signature:(const char* db, char* col, char* uuid)
nctdbput	nqclient.c	/^bool nctdbput(const char* db, char* col, char* uuid, char* val)$/;"	f	signature:(const char* db, char* col, char* uuid, char* val)
nctdbput	nqclient.h	/^bool nctdbput(const char* db, char* col, char* uuid, char* val);$/;"	p	signature:(const char* db, char* col, char* uuid, char* val)
nctdbsetindex	nqclient.c	/^static void nctdbsetindex(TCTDB* tdb, const char* set)$/;"	f	file:	signature:(TCTDB* tdb, const char* set)
ncterm	nqclient.c	/^void ncterm()$/;"	f
ncterm	nqclient.h	/^void ncterm(void);$/;"	p	signature:(void)
nqplandel	nqplan.c	/^void nqplandel(NQPLAN* plan)$/;"	f	signature:(NQPLAN* plan)
nqplandel	nqplan.h	/^void nqplandel(NQPLAN* plan);$/;"	p	signature:(NQPLAN* plan)
nqplannew	nqplan.c	/^NQPLAN* nqplannew(NQPREQRY* preqry)$/;"	f	signature:(NQPREQRY* preqry)
nqplannew	nqplan.h	/^NQPLAN* nqplannew(NQPREQRY* preqry);$/;"	p	signature:(NQPREQRY* preqry)
nqplanrun	nqplan.c	/^int nqplanrun(NQPLAN* plan, char** kstr, float* likeness)$/;"	f	signature:(NQPLAN* plan, char** kstr, float* likeness)
nqplanrun	nqplan.h	/^int nqplanrun(NQPLAN* plan, char** kstr, float* likeness = 0);$/;"	p	signature:(NQPLAN* plan, char** kstr, float* likeness = 0)
nqqrytrans	nqplan.c	/^static NQQRY* nqqrytrans(NQPLAN* plan, NQPREQRY* preqry)$/;"	f	file:	signature:(NQPLAN* plan, NQPREQRY* preqry)
plan_iter_pool	nqplan.c	/^static frl_slab_pool_t* plan_iter_pool = 0;$/;"	v	file:
plan_pool	nqplan.c	/^static frl_slab_pool_t* plan_pool = 0;$/;"	v	file:
postqry	nqplan.h	/^	NQQRY* postqry;$/;"	m	struct:NQPLANITER	access:public
prev	nqplan.h	/^	NQPLANITER* prev;$/;"	m	struct:NQPLANITER	access:public
qry	nqplan.h	/^	NQQRY* qry;$/;"	m	struct:NQPLANITER	access:public
show_help	nqserver.c	/^void show_help()$/;"	f
show_version	nqserver.c	/^void show_version()$/;"	f
tail	nqplan.h	/^	NQPLANITER* tail;$/;"	m	struct:__anon1	access:public
type	nqplan.h	/^	int type;$/;"	m	struct:NQPLANITER	access:public
